trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
}
saveRDS(M1_Reg, "RF_models/M1_Reg.rds")
plot(varImp(M1_Reg))
# ds, maxtemp_anom, month, visibility, mintemp_anom
(varImportanceM1 = varImp(M1_Reg))
par(mfrow      = c(1, 1))
yhat           = predict(M1_Reg, validation)
y              = validation$pollen_count
(models_RMSE[1,1] = mean((y - yhat)^2))
M1_Reg     = train(pollen_count ~ .,
data = M1_Reg_Data,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
set.seed(2020),
tuneGrid = rf_grid) #Here is the grid
saveRDS(M1_Reg, "RF_models/M1_Reg.rds")
plot(varImp(M1_Reg))
# ds, maxtemp_anom, month, visibility, mintemp_anom
(varImportanceM1 = varImp(M1_Reg))
par(mfrow      = c(1, 1))
yhat           = predict(M1_Reg, validation)
y              = validation$pollen_count
(models_RMSE[1,1] = mean((y - yhat)^2))
plot(yhat ~ y)
abline(0, 1, col = 'red')
cor(y, yhat)^2
{
pdf("./RF_Images/M1_obsVsPred.pdf", width=10, height=7)
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
legend("topright", legend = c("Observed", "RF Predicted"),
col = c("black", "red"), lty = c(1,1), bty = "n")
dev.off()
}
{
pdf("./RF_Images/M1_Reg_obsVsPred.pdf", width=10, height=7)
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
legend("topright", legend = c("Observed", "RF Predicted"),
col = c("black", "red"), lty = c(1,1), bty = "n")
dev.off()
}
plot(yhat ~ y)
abline(0, 1, col = 'red')
cor(y, yhat)^2
# pdf("./RF_Images/M1_Reg_obsVsPred.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16)
abline(0, 1, col = 'red')
# pdf("./RF_Images/M1_Reg_obsVsPred.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, colour = alpha("black", 0.5))
# pdf("./RF_Images/M1_Reg_obsVsPred.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, color = alpha("black", 0.5))
# pdf("./RF_Images/M1_Reg_obsVsPred.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, col = alpha("black", 0.5))
abline(0, 1, col = 'red')
# pdf("./RF_Images/M1_Reg_obsVsPred.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, col = alpha("black", 0.7))
# pdf("./RF_Images/M1_Reg_obsVsPred.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, col = alpha("black", 0.3))
abline(0, 1, col = 'red')
# pdf("./RF_Images/M1_Reg_obsVsPred.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, col = alpha("black", 0.5))
abline(0, 1, col = 'red')
pdf("./RF_Images/M1_Reg_fitted.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, col = alpha("black", 0.5))
abline(0, 1, col = 'red')
dev.off()
yIn     = (validation %>% filter(season == "In season"))$pollen_count
yOut    = (validation %>% filter(season == "Not in season"))$pollen_count
yhatIn  = yhat[which(validation$season == "In season")]
yhatOut = yhat[which(validation$season == "Not in season")]
(models_RMSE[1,2] = mean((yIn - yhatIn)^2))   # 21.93819
cor(yIn, yhatIn)^2       # 0.8728305
plot(yIn ~ yhatIn)
abline(0, 1, col = 'red')
(models_RMSE[1,3] = mean((yOut - yhatOut)^2)) # 0.2586891
(models_RMSE[1,3] = mean((yOut - yhatOut)^2)) # 0.2647444
cor(yOut, yhatOut)^2     # 0.8066374
cor(yOut, yhatOut)^2     # 0.7993948
plot(yOut ~ yhatOut)
abline(0, 1, col = 'red')
yhatMat    = as.data.frame(yhat, ncol = 1)
colnames(yhatMat) = "pollen_count"
yhatCat    = dplyr::select(yhatMat) %>%
mutate(pollen_count =  yhatMat) %>%
mutate(cat = case_when(
yhatMat < 1 ~ "Very low",
yhatMat >= 1 & yhatMat <= 3 ~ "Low",
yhatMat >= 3 & yhatMat <= 8 ~ "Moderate",
yhatMat >= 8 & yhatMat <= 14.8 ~ "High",
yhatMat >= 14.8 ~ "Very high"))
yhatCat$cat = as.factor(yhatCat$cat)
yMat    = as.data.frame(y, ncol = 1)
colnames(yMat) = "pollen_count"
yCat    = dplyr::select(yMat) %>%
mutate(pollen_count =  yMat) %>%
mutate(cat = case_when(
yMat < 1 ~ "Very low",
yMat >= 1 & yMat <= 3 ~ "Low",
yMat >= 3 & yMat <= 8 ~ "Moderate",
yMat >= 8 & yMat <= 14.8 ~ "High",
yMat >= 14.8 ~ "Very high"))
yCat$cat = as.factor(yCat$cat)
CM1 = confusionMatrix(yCat$cat, yhatCat$cat)
CM1$overall[1] # 0.7642857
models_accuracy[1,1] = CM1$overall['Accuracy']
models_accuracy
M1_Reg_Data_Class = dplyr::select(train, -logvalue, -date, - pollen_count, -X,
-veg_index, - VI_count, - VI_minimum, - VI_maximum,
- VI_range, -VI_mean, - VI_sd, - VI_UQ,
-VI_U1.5.IQR, -veg_index, -VI_L1.5.IQR, -VI_LQ) #%>%
rf_grid = expand.grid(mtry = 10:15,
splitrule = 'gini',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl    = trainControl(method = 'oob', verboseIter = T)
M1_Reg_Data_Class = dplyr::select(train, -logvalue, -date, - pollen_count, -X,
-veg_index, - VI_count, - VI_minimum, - VI_maximum,
- VI_range, -VI_mean, - VI_sd, - VI_UQ,
-VI_U1.5.IQR, -veg_index, -VI_L1.5.IQR, -VI_LQ) #%>%
rf_grid = expand.grid(mtry = 10:15,
splitrule = 'gini',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl    = trainControl(method = 'oob', verboseIter = T)
M1_class = train(pollen_cat ~ .,
data = M1_Reg_Data_Class,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
set.seed(2020),
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
saveRDS(M1_class, "RF_models/M1_class.rds")
plot(varImp(M1_class))
M1_Reg_Data_Class = dplyr::select(train, -logvalue, -date, - pollen_count, -X,
-veg_index, - VI_count, - VI_minimum, - VI_maximum,
- VI_range, -VI_mean, - VI_sd, - VI_UQ,
-VI_U1.5.IQR, -veg_index, -VI_L1.5.IQR, -VI_LQ) #%>%
rf_grid = expand.grid(mtry = 10:15,
splitrule = 'gini',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl    = trainControl(method = 'oob', verboseIter = T)
M1_Class = train(pollen_cat ~ .,
data = M1_Reg_Data_Class,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
set.seed(2020),
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
saveRDS(M1_Class, "RF_models/M1_Class.rds")
plot(varImp(M1_Class))
# ds, wind_dir, max_temp, visability, humid
(varImportanceM1_Class = varImp(M1_Class))
yhat           = as.factor(predict(M1_Class, validation))
y              = as.factor(validation$pollen_cat)
CM1.2 = confusionMatrix(y, yhat)
CM1.2$overall[1]
(models_accuracy[1,2] = CM1.2$overall['Accuracy'])
models_accuracy
yIn     = as.factor((validation %>% filter(season == "In season"))$pollen_cat)
yOut    = as.factor((validation %>% filter(season == "Not in season"))$pollen_cat)
yhatIn  = yhat[which(validation$season == "In season")]
yhatOut = yhat[which(validation$season == "Not in season")]
CM1.2In = confusionMatrix(yIn, yhatIn)
CM1.2In$overall[1]
(models_accuracy[1,3] = CM1.2In$overall['Accuracy'])
models_accuracy
CM1_Class = confusionMatrix(y, yhat)
CM1_Class$overall[1] # 0.964
(models_accuracy[1,2] = CM1_Class$overall['Accuracy'])
yIn     = as.factor((validation %>% filter(season == "In season"))$pollen_cat)
yOut    = as.factor((validation %>% filter(season == "Not in season"))$pollen_cat)
yhatIn  = yhat[which(validation$season == "In season")]
yhatOut = yhat[which(validation$season == "Not in season")]
CM1_ClassIn = confusionMatrix(yIn, yhatIn)
CM1_Class_In = confusionMatrix(yIn, yhatIn)
CM1_Class_In$overall[1] # 0.957
(models_accuracy[1,3] = CM1_Class_In$overall['Accuracy'])
CM1_Class_Out = confusionMatrix(yOut, yhatOut)
CM1_Class_Out$overall[1] # 0.957
CM1_Class_Out = confusionMatrix(yOut, yhatOut)
yOut
yhatOut
yOut
CM1_Class_Out = confusionMatrix(yOut, yhatOut)
CM1_Class_Out$overall[1] # 0.957
(models_accuracy[1,4] = CM1_Class_Out$overall['Accuracy'])
CM1_Class_Out = confusionMatrix(yOut, yhatOut)
CM1_Class_Out$overall[1] # 0.971
(models_accuracy[1,4] = CM1_Class_Out$overall['Accuracy'])
models_accuracy
y
yOut
yIn
# Initial Plots -------
ggplot(data, aes(x = as.Date(date), y = veg_index)) +
geom_line() +
ylab("Vegetation Index") +
xlab("Date") +
theme_bw()
data_matrix=as.matrix(animals[,2:17])   # I am using 16 variables, p=16.
data(animals)
data(Animals)
library(MASS)
data("Animals")
animals = data("Animals")
data_matrix=as.matrix(animals[,2:17])   # I am using 16 variables, p=16.
animals = data("Animals")
data_matrix=as.matrix(animals[,2:17])   # I am using 16 variables, p=16.
# Load Libraries ---------
{
library(tidyverse)
library(ranger)
library(caret)
library(mgcv)
library(gbm)
library(reshape2)
library(dplyr)
library(tidyverse)
library(randomForest)
}
rm(list = ls())
setwd("/Users/chloestipinovich/Documents/2020/Thesis Project/grass-pollen")
# Read in data ----------
data      = read.csv("Final_Data/data_complete.csv")
data      = as.data.frame(data)
names(data)
head(data)
data      = select(data, -File.Name, -Dataset, -aid, -Variance)
# Read in data ----------
data      = read.csv("Final_Data/data_complete.csv")
data      = as.data.frame(data)
names(data)
data      = select(data, -File.Name, -Dataset, -aid, -Variance)
library(dplyr)
data      = select(data, -File.Name, -Dataset, -aid, -Variance)
select(data, -File.Name, -Dataset, -aid, -Variance)
select(data, -File.Name
)
names(data)
data      = select(data,  -Dataset, -aid, -Variance)
data      = dplyr::select(data, -File.Name, -Dataset, -aid, -Variance)
data      = rename(data,  VI_count = Count, VI_minimum = Minimum, VI_maximum = Maximum,
VI_range = Range, VI_mean = Mean, VI_sd = Standard.Deviation,
VI_UQ = Upper.Quartile,VI_U1.5.IQR = Upper.1.5.IQR, VI_L1.5.IQR = Lower.1.5.IQR,
VI_LQ = Lower.Quartile)
names(data)
# Initial Plots -------
ggplot(data, aes(x = as.Date(date), y = veg_index)) +
geom_line() +
ylab("Vegetation Index") +
xlab("Date") +
theme_bw()
data$date = as.Date(data$date )
pollen         = ggplot(data, aes(x = as.Date(date))) +
geom_line(aes(y = pollen_count), colour = 'darkblue') +
ylab("Pollen Count") +
xlab("") +
theme_bw() +
theme(legend.position = 'none')
vi_max         = ggplot(data, aes(x = as.Date(date))) +
geom_line(aes(y = veg_index, colour = 'darkred')) +
ylab("Vegetation Index") +
xlab("Date") +
theme_bw() +
theme(legend.position = 'none')
ggpubr::ggarrange(pollen, vi_max, ncol = 1)
#                     VI_range = Range, VI_mean = Mean, VI_sd = Standard.Deviation,
#                     VI_UQ = Upper.Quartile,VI_U1.5.IQR = Upper.1.5.IQR, VI_L1.5.IQR = Lower.1.5.IQR,
#                     VI_LQ = Lower.Quartile)
#
# test       = read.csv("Final_Data/test.csv", h = T)
# test       = select(test, -File.Name, -Dataset, -aid, -Variance)
# test       = rename(test,  VI_count = Count, VI_minimum = Minimum, VI_maximum = Maximum,
#                     VI_range = Range, VI_mean = Mean, VI_sd = Standard.Deviation,
#                     VI_UQ = Upper.Quartile,VI_U1.5.IQR = Upper.1.5.IQR, VI_L1.5.IQR = Lower.1.5.IQR,
#                     VI_LQ = Lower.Quartile)
which(data$fyear=="2011")
which(data$fyear=="2011"|data$fyear=="2012")
train = data[which(data$fyear=="2011"|data$fyear=="2012"|
data$fyear=="2013")]
train = data[which(data$fyear=="2011"|data$fyear=="2012"|
data$fyear=="2013"),]
train
validation = data[which(data$fyear=="2014"),]
sum(which(data$fyear=="2011"))
count(which(data$fyear=="2011"))
(which(data$fyear=="2011"))
length(which(data$fyear=="2011"))
years %>% data %>%
group_by(fyears) %>%
summarise(no_rows = length(fyears))
data %>%
group_by(fyears) %>%
summarise(no_rows = length(fyears))
data %>%
group_by(fyear) %>%
summarise(no_rows = length(fyear))
data[which(data$fyear=="2020"),]
head(data[which(data$fyear=="2020"),])
tail(data[which(data$fyear=="2020"),])
data %>%
group_by(fyear) %>%
summarise(no_rows = length(fyear))
train      = data[which(data$fyear=="2011"|data$fyear=="2012"),]
validation = data[which(data$fyear=="2013"),]
test       = data[which(data$fyear=="2014"),]
M1_Reg_Data = dplyr::select(train, -logvalue, -date, - pollen_cat, -X,
-veg_index, - VI_count, - VI_minimum, - VI_maximum,
- VI_range, -VI_mean, - VI_sd, - VI_UQ,
-VI_U1.5.IQR, -veg_index, -VI_L1.5.IQR, -VI_LQ) #%>%
rf_grid    = expand.grid(mtry = 10:15,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl       = trainControl(method = 'oob', verboseIter = T)
M1_Reg     = train(pollen_count ~ .,
data = M1_Reg_Data,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
set.seed(2020),
tuneGrid = rf_grid) #Here is the grid
saveRDS(M1_Reg, "RF_models/2YearsTraining/M1_Reg.rds")
plot(varImp(M1_Reg))
# ds, maxtemp_anom, month, visibility, mintemp_anom
(varImportanceM1_Reg = varImp(M1_Reg))
saveRDS(varImportanceM1_Reg, "RF_models/2YearsTraining/M1_Reg_Var_Imp.rds")
par(mfrow      = c(1, 1))
yhat           = predict(M1_Reg, validation)
y              = validation$pollen_count
(models_RMSE[1,1] = mean((y - yhat)^2))
yhat
y
length(y)
length(yhat)
yhat           = predict(M1_Reg, validation)
y              = validation$pollen_count
length(validation)
nrow(validation)
skim(validation)
sum(is.na(validation))
yhat           = predict(M1_Reg, validation)
y              = validation$pollen_count
(models_RMSE[1,1] = mean((y - yhat)^2))
models_RMSE
models_RMSE               = matrix(NA, nrow = 5, ncol = 3)
models_accuracy           = matrix(NA, ncol = 4, nrow = 5)
colnames(models_RMSE)     = c("Total", "In Season", "Out of Season")
colnames(models_accuracy) = c("Accuracy for Reg to cats", "Accuracy straight to cats", "In Season","Out of Season")
par(mfrow      = c(1, 1))
yhat           = predict(M1_Reg, validation)
y              = validation$pollen_count
(models_RMSE[1,1] = mean((y - yhat)^2))
{
# pdf("./RF_Images/M1_Reg_fitted.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, col = alpha("black", 0.5))
abline(0, 1, col = 'red')
# dev.off()
}
summarise_all(validation)
validation %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
validation %>%
dplyr::select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
library(skimr)
skim(validation)
M1_Reg_Data = dplyr::select(train, -logvalue, -date, - pollen_cat, -X,
-veg_index, - VI_count, - VI_minimum, - VI_maximum,
- VI_range, -VI_mean, - VI_sd, - VI_UQ,
-VI_U1.5.IQR, -veg_index, -VI_L1.5.IQR, -VI_LQ, -visibility) #%>%
rf_grid    = expand.grid(mtry = 10:15,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl       = trainControl(method = 'oob', verboseIter = T)
M1_Reg     = train(pollen_count ~ .,
data = M1_Reg_Data,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
set.seed(2020),
tuneGrid = rf_grid) #Here is the grid
saveRDS(M1_Reg, "RF_models/2YearsTraining/M1_Reg.rds")
plot(varImp(M1_Reg))
# ds, maxtemp_anom, month, visibility, mintemp_anom
(varImportanceM1_Reg = varImp(M1_Reg))
saveRDS(varImportanceM1_Reg, "RF_models/2YearsTraining/M1_Reg_Var_Imp.rds")
par(mfrow      = c(1, 1))
yhat           = predict(M1_Reg, validation)
y              = validation$pollen_count
(models_RMSE[1,1] = mean((y - yhat)^2))
skim(validation)
{
# pdf("./RF_Images/M1_Reg_fitted.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, col = alpha("black", 0.5))
abline(0, 1, col = 'red')
# dev.off()
}
{
pdf("./RF_Images/2YearsTraining/M1_Reg_fitted.pdf", width=10, height=7)
plot(yhat ~ y, pch = 16, col = alpha("black", 0.5))
abline(0, 1, col = 'red')
dev.off()
}
cor(y, yhat)^2
{
pdf("./RF_Images/2YearsTraining/M1_Reg_obsVsPred.pdf", width=10, height=7)
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
legend("topright", legend = c("Observed", "RF Predicted"),
col = c("black", "red"), lty = c(1,1), bty = "n")
dev.off()
}
yIn     = (validation %>% filter(season == "In season"))$pollen_count
yOut    = (validation %>% filter(season == "Not in season"))$pollen_count
yhatIn  = yhat[which(validation$season == "In season")]
yhatOut = yhat[which(validation$season == "Not in season")]
(models_RMSE[1,2] = mean((yIn - yhatIn)^2))   # 21.37
cor(yIn, yhatIn)^2       # 0.873
plot(yIn ~ yhatIn)
abline(0, 1, col = 'red')
(models_RMSE[1,3] = mean((yOut - yhatOut)^2)) # 0.265
cor(yOut, yhatOut)^2     # 0.799
plot(yOut ~ yhatOut)
abline(0, 1, col = 'red')
yhatMat    = as.data.frame(yhat, ncol = 1)
colnames(yhatMat) = "pollen_count"
yhatCat    = dplyr::select(yhatMat) %>%
mutate(pollen_count =  yhatMat) %>%
mutate(cat = case_when(
yhatMat < 1 ~ "Very low",
yhatMat >= 1 & yhatMat <= 3 ~ "Low",
yhatMat >= 3 & yhatMat <= 8 ~ "Moderate",
yhatMat >= 8 & yhatMat <= 14.8 ~ "High",
yhatMat >= 14.8 ~ "Very high"))
yhatCat$cat = as.factor(yhatCat$cat)
yMat    = as.data.frame(y, ncol = 1)
colnames(yMat) = "pollen_count"
yCat    = dplyr::select(yMat) %>%
mutate(pollen_count =  yMat) %>%
mutate(cat = case_when(
yMat < 1 ~ "Very low",
yMat >= 1 & yMat <= 3 ~ "Low",
yMat >= 3 & yMat <= 8 ~ "Moderate",
yMat >= 8 & yMat <= 14.8 ~ "High",
yMat >= 14.8 ~ "Very high"))
yCat$cat = as.factor(yCat$cat)
CM1 = confusionMatrix(yCat$cat, yhatCat$cat)
CM1$overall[1] # 0.764
models_accuracy[1,1] = CM1$overall['Accuracy']
saveRDS(CM1, "RF_CM/2YearsTraining/M1_Reg_CM.rds")
CM1$overall[1] # 0.764
models_accuracy[1,1] = CM1$overall['Accuracy']
M1_Reg_Data_Class = dplyr::select(train, -logvalue, -date, - pollen_count, -X,
-veg_index, - VI_count, - VI_minimum, - VI_maximum,
- VI_range, -VI_mean, - VI_sd, - VI_UQ,
-VI_U1.5.IQR, -veg_index, -VI_L1.5.IQR, -VI_LQ, - visibility) #%>%
rf_grid = expand.grid(mtry = 10:15,
splitrule = 'gini',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl    = trainControl(method = 'oob', verboseIter = T)
M1_Class = train(pollen_cat ~ .,
data = M1_Reg_Data_Class,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
set.seed(2020),
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
saveRDS(M1_Class, "RF_models/2YearsTraining/M1_Class.rds")
plot(varImp(M1_Class))
# ds, wind_dir, max_temp, visability, humid
(varImportanceM1_Class = varImp(M1_Class))
saveRDS(varImportanceM1_Class, "RF_models/2YearsTraining/M1_Class_Var_Imp.rds")
yhat           = as.factor(predict(M1_Class, validation))
y              = as.factor(validation$pollen_cat)
CM1_Class = confusionMatrix(y, yhat)
CM1_Class$overall[1] # 0.964
(models_accuracy[1,2] = CM1_Class$overall['Accuracy'])
saveRDS(CM1_Class, "RF_CM/2YearsTraining/M1_Class_CM.rds")
CM1_Class$overall[1] # 0.964
(models_accuracy[1,2] = CM1_Class$overall['Accuracy'])
yIn     = as.factor((validation %>% filter(season == "In season"))$pollen_cat)
yOut    = as.factor((validation %>% filter(season == "Not in season"))$pollen_cat)
yhatIn  = yhat[which(validation$season == "In season")]
yhatOut = yhat[which(validation$season == "Not in season")]
CM1_Class_In = confusionMatrix(yIn, yhatIn)
CM1_Class_In$overall[1] # 0.957
(models_accuracy[1,3] = CM1_Class_In$overall['Accuracy'])
CM1_Class_Out = confusionMatrix(yOut, yhatOut)
CM1_Class_Out$overall[1] # 0.971
(models_accuracy[1,4] = CM1_Class_Out$overall['Accuracy'])
length(yhat)
length(y)
saveRDS(CM1_Class_Out, "RF_CM/2YearsTraining/M1_Class_Out_CM.rds")
CM1_Class_Out = confusionMatrix(yOut, yhatOut)
saveRDS(CM1_Class_Out, "RF_CM/2YearsTraining/M1_Class_Out_CM.rds")
CM1_Class_Out$overall[1] # 0.971
(models_accuracy[1,4] = CM1_Class_Out$overall['Accuracy'])
