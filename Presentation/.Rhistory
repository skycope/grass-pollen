wind_dir <= 100 | wind_dir >= 200 ~ "dir2"
)) %>% na.omit()
best       = readRDS("RF_saved/3YearsTraining/Models/M5_Class.rds")
yhat       = predict(best, test)
acc        = pred(best, test)
acc
confusionMatrix(table(yhat, test$pollen_cat)
confusionMatrix(table(yhat, test$pollen_cat))
# Load Libraries ---------
{
library(tidyverse)
library(ranger)
library(caret)
library(mgcv)
library(gbm)
library(reshape2)
library(dplyr)
library(tidyverse)
library(randomForest)
library(skimr)
}
rm(list = ls())
setwd("/Users/chloestipinovich/Documents/2020/Thesis Project/grass-pollen")
# Read in data ----------
data      = read.csv("Final_Data/data_complete.csv")
data      = as.data.frame(data)
names(data)
head(data)
data      = dplyr::select(data, -File.Name, -Dataset, -aid, -Variance)
data      = rename(data,  VI_count = Count, VI_minimum = Minimum, VI_maximum = Maximum,
VI_range = Range, VI_mean = Mean, VI_sd = Standard.Deviation,
VI_UQ = Upper.Quartile,VI_U1.5.IQR = Upper.1.5.IQR, VI_L1.5.IQR = Lower.1.5.IQR,
VI_LQ = Lower.Quartile)
names(data)
train      = data[which(data$fyear=="2011"|data$fyear=="2012"|data$fyear=="2013"),]
validation = data[which(data$fyear=="2014"),]
test       = data[which(data$fyear=="2018"),]
models_RMSE               = matrix(NA, nrow = 5, ncol = 3)
models_accuracy           = matrix(NA, ncol = 4, nrow = 5)
colnames(models_RMSE)     = c("Total", "In Season", "Out of Season")
colnames(models_accuracy) = c("Accuracy for Reg to cats", "Accuracy straight to cats", "In Season","Out of Season")
{
M5_Reg_Data_Class <- dplyr::select(train, -logvalue, -date,
- pollen_count, -X,-VI_range,
-visibility) %>%
mutate(cat_lag1 = lag(pollen_cat, 1),
cat_lag2 = lag(pollen_cat, 2),
cat_lag3 = lag(pollen_cat, 3),
cat_lag4 = lag(pollen_cat, 4),
cat_lag5 = lag(pollen_cat, 5),
maxtemp_anom_lag1 = lag(maxtemp_anom, 1),
maxtemp_anom_lag2 = lag(maxtemp_anom, 2),
maxtemp_anom_lag3 = lag(maxtemp_anom, 3),
maxtemp_anom_lag4 = lag(maxtemp_anom, 4),
# visibility_lag1   = lag(visibility, 1),
# visibility_lag2   = lag(visibility, 2),
# visibility_lag3   = lag(visibility, 3),
# visibility_lag4   = lag(visibility, 4),
wind_speed_lag1   = lag(wind_speed, 1),
wind_speed_lag2   = lag(wind_speed, 2),
wind_speed_lag3   = lag(wind_speed, 3),
humid_lag1        = lag(humid, 1),
humid_lag2        = lag(humid, 2),
humid_lag3        = lag(humid, 3),
VI_mean_lag1 = lag(VI_mean, 16),
VI_mean_lag2 = lag(VI_mean, 32),
VI_mean_lag3 = lag(VI_mean, 48),
VI_max_lag1 = lag(VI_maximum, 16),
VI_max_lag2 = lag(VI_maximum, 32),
VI_max_lag3 = lag(VI_maximum, 48),
VI_count_lag1 = lag(VI_count, 16),
VI_count_lag2 = lag(VI_count, 32),
VI_count_lag3 = lag(VI_count, 48),
VI_up15_lag1 = lag(VI_U1.5.IQR, 16),
VI_up15_lag2 = lag(VI_U1.5.IQR, 32),
VI_up15_lag3 = lag(VI_U1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
wind_dir > 100 & wind_dir < 200 ~ "dir1",
wind_dir <= 100 | wind_dir >= 200 ~ "dir2"
))  %>% na.omit()
rf_grid <- expand.grid(mtry = 10:15,
splitrule = 'gini',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
M5_Class <- train(pollen_cat ~ .,
data = M5_Reg_Data_Class,
method = 'ranger',
num.trees = 2000,
verbose = T,
set.seed(2020),
importance = 'impurity',
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
}
saveRDS(M5_Class, "RF_saved/3YearsTraining/Models/M5_Class.rds")
test       = data[which(data$fyear=="2018"),]
test =  dplyr::select(test, -logvalue) %>%
mutate(cat_lag1 = lag(pollen_cat, 1),
cat_lag2 = lag(pollen_cat, 2),
cat_lag3 = lag(pollen_cat, 3),
cat_lag4 = lag(pollen_cat, 4),
cat_lag5 = lag(pollen_cat, 5),
maxtemp_anom_lag1 = lag(maxtemp_anom, 1),
maxtemp_anom_lag2 = lag(maxtemp_anom, 2),
maxtemp_anom_lag3 = lag(maxtemp_anom, 3),
maxtemp_anom_lag4 = lag(maxtemp_anom, 4),
# visibility_lag1   = lag(visibility, 1),
# visibility_lag2   = lag(visibility, 2),
# visibility_lag3   = lag(visibility, 3),
# visibility_lag4   = lag(visibility, 4),
wind_speed_lag1   = lag(wind_speed, 1),
wind_speed_lag2   = lag(wind_speed, 2),
wind_speed_lag3   = lag(wind_speed, 3),
humid_lag1        = lag(humid, 1),
humid_lag2        = lag(humid, 2),
humid_lag3        = lag(humid, 3),
VI_mean_lag1 = lag(VI_mean, 16),
VI_mean_lag2 = lag(VI_mean, 32),
VI_mean_lag3 = lag(VI_mean, 48),
VI_max_lag1 = lag(VI_maximum, 16),
VI_max_lag2 = lag(VI_maximum, 32),
VI_max_lag3 = lag(VI_maximum, 48),
VI_count_lag1 = lag(VI_count, 16),
VI_count_lag2 = lag(VI_count, 32),
VI_count_lag3 = lag(VI_count, 48),
VI_up15_lag1 = lag(VI_U1.5.IQR, 16),
VI_up15_lag2 = lag(VI_U1.5.IQR, 32),
VI_up15_lag3 = lag(VI_U1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
wind_dir > 100 & wind_dir < 200 ~ "dir1",
wind_dir <= 100 | wind_dir >= 200 ~ "dir2"
)) %>% na.omit()
best       = readRDS("RF_saved/3YearsTraining/Models/M5_Class.rds")
yhat       = predict(best, test)
acc        = pred(best, test)
acc
pred      = function(model, data){
p = predict(model, data)
if (class(p)=="numeric"){
yhatMat    = as.data.frame(p, ncol = 1)
colnames(yhatMat) = "pollen_count"
yhatCat    = dplyr::select(yhatMat) %>%
mutate(pollen_count =  yhatMat) %>%
mutate(cat = case_when(
yhatMat < 1 ~ "Very low",
yhatMat >= 1 & yhatMat <= 3 ~ "Low",
yhatMat >= 3 & yhatMat <= 8 ~ "Moderate",
yhatMat >= 8 & yhatMat <= 14.8 ~ "High",
yhatMat >= 14.8 ~ "Very high"))
yhatCat$cat = as.factor(yhatCat$cat)
yMat    = as.data.frame(data$pollen_count, ncol = 1)
colnames(yMat) = "pollen_count"
yCat    = dplyr::select(yMat) %>%
mutate(pollen_count =  yMat) %>%
mutate(cat = case_when(
yMat < 1 ~ "Very low",
yMat >= 1 & yMat <= 3 ~ "Low",
yMat >= 3 & yMat <= 8 ~ "Moderate",
yMat >= 8 & yMat <= 14.8 ~ "High",
yMat >= 14.8 ~ "Very high"))
yCat$cat = as.factor(yCat$cat)
cm = confusionMatrix(table(yCat$cat, yhatCat$cat))
return(cm$overall['Accuracy'])
}
if (class(p) == "factor"){
p  = as.factor(p)
cm = confusionMatrix( table(p,data$pollen_cat))
return(cm$overall['Accuracy'])
}
}
test       = data[which(data$fyear=="2018"),]
test =  dplyr::select(test, -logvalue) %>%
mutate(cat_lag1 = lag(pollen_cat, 1),
cat_lag2 = lag(pollen_cat, 2),
cat_lag3 = lag(pollen_cat, 3),
cat_lag4 = lag(pollen_cat, 4),
cat_lag5 = lag(pollen_cat, 5),
maxtemp_anom_lag1 = lag(maxtemp_anom, 1),
maxtemp_anom_lag2 = lag(maxtemp_anom, 2),
maxtemp_anom_lag3 = lag(maxtemp_anom, 3),
maxtemp_anom_lag4 = lag(maxtemp_anom, 4),
# visibility_lag1   = lag(visibility, 1),
# visibility_lag2   = lag(visibility, 2),
# visibility_lag3   = lag(visibility, 3),
# visibility_lag4   = lag(visibility, 4),
wind_speed_lag1   = lag(wind_speed, 1),
wind_speed_lag2   = lag(wind_speed, 2),
wind_speed_lag3   = lag(wind_speed, 3),
humid_lag1        = lag(humid, 1),
humid_lag2        = lag(humid, 2),
humid_lag3        = lag(humid, 3),
VI_mean_lag1 = lag(VI_mean, 16),
VI_mean_lag2 = lag(VI_mean, 32),
VI_mean_lag3 = lag(VI_mean, 48),
VI_max_lag1 = lag(VI_maximum, 16),
VI_max_lag2 = lag(VI_maximum, 32),
VI_max_lag3 = lag(VI_maximum, 48),
VI_count_lag1 = lag(VI_count, 16),
VI_count_lag2 = lag(VI_count, 32),
VI_count_lag3 = lag(VI_count, 48),
VI_up15_lag1 = lag(VI_U1.5.IQR, 16),
VI_up15_lag2 = lag(VI_U1.5.IQR, 32),
VI_up15_lag3 = lag(VI_U1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
wind_dir > 100 & wind_dir < 200 ~ "dir1",
wind_dir <= 100 | wind_dir >= 200 ~ "dir2"
)) %>% na.omit()
best       = readRDS("RF_saved/3YearsTraining/Models/M5_Class.rds")
yhat       = predict(best, test)
acc        = pred(best, test)
acc
rm(list = ls())
setwd("/Users/chloestipinovich/Documents/2020/Thesis Project/grass-pollen")
# Read in data ----------
data      = read.csv("Final_Data/data_complete.csv")
data      = as.data.frame(data)
names(data)
head(data)
data      = dplyr::select(data, -File.Name, -Dataset, -aid, -Variance)
data      = rename(data,  VI_count = Count, VI_minimum = Minimum, VI_maximum = Maximum,
VI_range = Range, VI_mean = Mean, VI_sd = Standard.Deviation,
VI_UQ = Upper.Quartile,VI_U1.5.IQR = Upper.1.5.IQR, VI_L1.5.IQR = Lower.1.5.IQR,
VI_LQ = Lower.Quartile)
names(data)
train      = data[which(data$fyear=="2011"|data$fyear=="2012"|data$fyear=="2013"),]
validation = data[which(data$fyear=="2014"),]
test       = data[which(data$fyear=="2018"),]
M5_Class
{
M5_Reg_Data_Class <- dplyr::select(train, -logvalue, -date,
- pollen_count, -X,-VI_range,
-visibility) %>%
mutate(cat_lag1 = lag(pollen_cat, 1),
cat_lag2 = lag(pollen_cat, 2),
cat_lag3 = lag(pollen_cat, 3),
cat_lag4 = lag(pollen_cat, 4),
cat_lag5 = lag(pollen_cat, 5),
maxtemp_anom_lag1 = lag(maxtemp_anom, 1),
maxtemp_anom_lag2 = lag(maxtemp_anom, 2),
maxtemp_anom_lag3 = lag(maxtemp_anom, 3),
maxtemp_anom_lag4 = lag(maxtemp_anom, 4),
# visibility_lag1   = lag(visibility, 1),
# visibility_lag2   = lag(visibility, 2),
# visibility_lag3   = lag(visibility, 3),
# visibility_lag4   = lag(visibility, 4),
wind_speed_lag1   = lag(wind_speed, 1),
wind_speed_lag2   = lag(wind_speed, 2),
wind_speed_lag3   = lag(wind_speed, 3),
humid_lag1        = lag(humid, 1),
humid_lag2        = lag(humid, 2),
humid_lag3        = lag(humid, 3),
VI_mean_lag1 = lag(VI_mean, 16),
VI_mean_lag2 = lag(VI_mean, 32),
VI_mean_lag3 = lag(VI_mean, 48),
VI_max_lag1 = lag(VI_maximum, 16),
VI_max_lag2 = lag(VI_maximum, 32),
VI_max_lag3 = lag(VI_maximum, 48),
VI_count_lag1 = lag(VI_count, 16),
VI_count_lag2 = lag(VI_count, 32),
VI_count_lag3 = lag(VI_count, 48),
VI_up15_lag1 = lag(VI_U1.5.IQR, 16),
VI_up15_lag2 = lag(VI_U1.5.IQR, 32),
VI_up15_lag3 = lag(VI_U1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
wind_dir > 100 & wind_dir < 200 ~ "dir1",
wind_dir <= 100 | wind_dir >= 200 ~ "dir2"
))  %>% na.omit()
rf_grid <- expand.grid(mtry = 10:15,
splitrule = 'gini',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
M5_Class <- train(pollen_cat ~ .,
data = M5_Reg_Data_Class,
method = 'ranger',
num.trees = 2000,
verbose = T,
set.seed(2020),
importance = 'impurity',
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
}
# Create lag values
{
M5_Reg_Data <- dplyr::select(train, -logvalue,
-date, - pollen_cat, -X,
-visibility, -VI_range) %>%
mutate(count_lag1 = lag(pollen_count, 1),
count_lag2 = lag(pollen_count, 2),
count_lag3 = lag(pollen_count, 3),
count_lag4 = lag(pollen_count, 4),
count_lag5 = lag(pollen_count, 5),
maxtemp_anom_lag1 = lag(maxtemp_anom, 1),
maxtemp_anom_lag2 = lag(maxtemp_anom, 2),
maxtemp_anom_lag3 = lag(maxtemp_anom, 3),
maxtemp_anom_lag4 = lag(maxtemp_anom, 4),
# Visibility_lag1   = lag(Visibility, 1),
# Visibility_lag2   = lag(Visibility, 2),
# Visibility_lag3   = lag(Visibility, 3),
# Visibility_lag4   = lag(Visibility, 4),
wind_speed_lag1    = lag(wind_speed, 1),
wind_speed_lag2    = lag(wind_speed, 2),
wind_speed_lag3    = lag(wind_speed, 3),
humid_lag1         = lag(humid, 1),
humid_lag2         = lag(humid, 2),
humid_lag3         = lag(humid, 3),
VI_mean_lag1 = lag(VI_mean, 16),
VI_mean_lag2 = lag(VI_mean, 32),
VI_mean_lag3 = lag(VI_mean, 48),
VI_max_lag1 = lag(VI_maximum, 16),
VI_max_lag2 = lag(VI_maximum, 32),
VI_max_lag3 = lag(VI_maximum, 48),
VI_count_lag1 = lag(VI_count, 16),
VI_count_lag2 = lag(VI_count, 32),
VI_count_lag3 = lag(VI_count, 48),
VI_up15_lag1 = lag(VI_U1.5.IQR, 16),
VI_up15_lag2 = lag(VI_U1.5.IQR, 32),
VI_up15_lag3 = lag(VI_U1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
wind_dir > 100 & wind_dir < 200 ~ "dir1",
wind_dir <= 100 | wind_dir >= 200 ~ "dir2"
))  %>% na.omit()
rf_grid <- expand.grid(mtry = 10:15,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
M5_Reg = train(pollen_count ~ .,
data = M5_Reg_Data,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
#probability = T,
set.seed(2020),
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
# rf = randomForest(value~., data = train,
#                   mtry = rf_gridsearch$bestTune[,1],
#                   min.node.size = rf_gridsearch$bestTune[,3],
#                   norm.votes = TRUE, proximity = TRUE)
}
saveRDS(M5_Reg, "RF_saved/4YearsTraining/Models/M5_Reg.rds")
validation_lags <- dplyr::select(validation, -logvalue) %>%
mutate(count_lag1 = lag(pollen_count, 1),
count_lag2 = lag(pollen_count, 2),
count_lag3 = lag(pollen_count, 3),
count_lag4 = lag(pollen_count, 4),
count_lag5 = lag(pollen_count, 5),
maxtemp_anom_lag1 = lag(maxtemp_anom, 1),
maxtemp_anom_lag2 = lag(maxtemp_anom, 2),
maxtemp_anom_lag3 = lag(maxtemp_anom, 3),
maxtemp_anom_lag4 = lag(maxtemp_anom, 4),
# visibility_lag1   = lag(visibility, 1),
# visibility_lag2   = lag(visibility, 2),
# visibility_lag3   = lag(visibility, 3),
# visibility_lag4   = lag(visibility, 4),
wind_speed_lag1   = lag(wind_speed, 1),
wind_speed_lag2   = lag(wind_speed, 2),
wind_speed_lag3   = lag(wind_speed, 3),
humid_lag1        = lag(humid, 1),
humid_lag2        = lag(humid, 2),
humid_lag3        = lag(humid, 3),
VI_mean_lag1 = lag(VI_mean, 16),
VI_mean_lag2 = lag(VI_mean, 32),
VI_mean_lag3 = lag(VI_mean, 48),
VI_max_lag1 = lag(VI_maximum, 16),
VI_max_lag2 = lag(VI_maximum, 32),
VI_max_lag3 = lag(VI_maximum, 48),
VI_count_lag1 = lag(VI_count, 16),
VI_count_lag2 = lag(VI_count, 32),
VI_count_lag3 = lag(VI_count, 48),
VI_up15_lag1 = lag(VI_U1.5.IQR, 16),
VI_up15_lag2 = lag(VI_U1.5.IQR, 32),
VI_up15_lag3 = lag(VI_U1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
wind_dir > 100 & wind_dir < 200 ~ "dir1",
wind_dir <= 100 | wind_dir >= 200 ~ "dir2"
)) %>% na.omit()
plot(varImp(M5_Reg))
(varImportanceM5_Reg = varImp(M5_Reg))
saveRDS(varImportanceM5_Reg, "RF_saved/4YearsTraining/Models/M5_Reg_VarImp.rds")
par(mfrow = c(1, 1))
yhat          = predict(M5_Reg, validation_lags)
y             = validation_lags$pollen_count
(models_RMSE[5,1] = mean((y - yhat)^2))
cor(y, yhat)^2
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
legend("topleft", legend = c("Observed", "RF Predicted"),
col = c("black", "red"), lty = c(1,1), bty = "n")
validation = data[which(data$fyear=="2018"),]
# Create lag values
{
M5_Reg_Data <- dplyr::select(train, -logvalue,
-date, - pollen_cat, -X,
-visibility, -VI_range) %>%
mutate(count_lag1 = lag(pollen_count, 1),
count_lag2 = lag(pollen_count, 2),
count_lag3 = lag(pollen_count, 3),
count_lag4 = lag(pollen_count, 4),
count_lag5 = lag(pollen_count, 5),
maxtemp_anom_lag1 = lag(maxtemp_anom, 1),
maxtemp_anom_lag2 = lag(maxtemp_anom, 2),
maxtemp_anom_lag3 = lag(maxtemp_anom, 3),
maxtemp_anom_lag4 = lag(maxtemp_anom, 4),
# Visibility_lag1   = lag(Visibility, 1),
# Visibility_lag2   = lag(Visibility, 2),
# Visibility_lag3   = lag(Visibility, 3),
# Visibility_lag4   = lag(Visibility, 4),
wind_speed_lag1    = lag(wind_speed, 1),
wind_speed_lag2    = lag(wind_speed, 2),
wind_speed_lag3    = lag(wind_speed, 3),
humid_lag1         = lag(humid, 1),
humid_lag2         = lag(humid, 2),
humid_lag3         = lag(humid, 3),
VI_mean_lag1 = lag(VI_mean, 16),
VI_mean_lag2 = lag(VI_mean, 32),
VI_mean_lag3 = lag(VI_mean, 48),
VI_max_lag1 = lag(VI_maximum, 16),
VI_max_lag2 = lag(VI_maximum, 32),
VI_max_lag3 = lag(VI_maximum, 48),
VI_count_lag1 = lag(VI_count, 16),
VI_count_lag2 = lag(VI_count, 32),
VI_count_lag3 = lag(VI_count, 48),
VI_up15_lag1 = lag(VI_U1.5.IQR, 16),
VI_up15_lag2 = lag(VI_U1.5.IQR, 32),
VI_up15_lag3 = lag(VI_U1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
wind_dir > 100 & wind_dir < 200 ~ "dir1",
wind_dir <= 100 | wind_dir >= 200 ~ "dir2"
))  %>% na.omit()
rf_grid <- expand.grid(mtry = 10:15,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
M5_Reg = train(pollen_count ~ .,
data = M5_Reg_Data,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
#probability = T,
set.seed(2020),
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
# rf = randomForest(value~., data = train,
#                   mtry = rf_gridsearch$bestTune[,1],
#                   min.node.size = rf_gridsearch$bestTune[,3],
#                   norm.votes = TRUE, proximity = TRUE)
}
saveRDS(M5_Reg, "RF_saved/4YearsTraining/Models/M5_Reg.rds")
validation_lags <- dplyr::select(validation, -logvalue) %>%
mutate(count_lag1 = lag(pollen_count, 1),
count_lag2 = lag(pollen_count, 2),
count_lag3 = lag(pollen_count, 3),
count_lag4 = lag(pollen_count, 4),
count_lag5 = lag(pollen_count, 5),
maxtemp_anom_lag1 = lag(maxtemp_anom, 1),
maxtemp_anom_lag2 = lag(maxtemp_anom, 2),
maxtemp_anom_lag3 = lag(maxtemp_anom, 3),
maxtemp_anom_lag4 = lag(maxtemp_anom, 4),
# visibility_lag1   = lag(visibility, 1),
# visibility_lag2   = lag(visibility, 2),
# visibility_lag3   = lag(visibility, 3),
# visibility_lag4   = lag(visibility, 4),
wind_speed_lag1   = lag(wind_speed, 1),
wind_speed_lag2   = lag(wind_speed, 2),
wind_speed_lag3   = lag(wind_speed, 3),
humid_lag1        = lag(humid, 1),
humid_lag2        = lag(humid, 2),
humid_lag3        = lag(humid, 3),
VI_mean_lag1 = lag(VI_mean, 16),
VI_mean_lag2 = lag(VI_mean, 32),
VI_mean_lag3 = lag(VI_mean, 48),
VI_max_lag1 = lag(VI_maximum, 16),
VI_max_lag2 = lag(VI_maximum, 32),
VI_max_lag3 = lag(VI_maximum, 48),
VI_count_lag1 = lag(VI_count, 16),
VI_count_lag2 = lag(VI_count, 32),
VI_count_lag3 = lag(VI_count, 48),
VI_up15_lag1 = lag(VI_U1.5.IQR, 16),
VI_up15_lag2 = lag(VI_U1.5.IQR, 32),
VI_up15_lag3 = lag(VI_U1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
wind_dir > 100 & wind_dir < 200 ~ "dir1",
wind_dir <= 100 | wind_dir >= 200 ~ "dir2"
)) %>% na.omit()
plot(varImp(M5_Reg))
(varImportanceM5_Reg = varImp(M5_Reg))
saveRDS(varImportanceM5_Reg, "RF_saved/4YearsTraining/Models/M5_Reg_VarImp.rds")
par(mfrow = c(1, 1))
yhat          = predict(M5_Reg, validation_lags)
y             = validation_lags$pollen_count
(models_RMSE[5,1] = mean((y - yhat)^2))
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
legend("topleft", legend = c("Observed", "RF Predicted"),
col = c("black", "red"), lty = c(1,1), bty = "n")
nrow(validation)
skim(validation)
validation = data[which(data$fyear=="2012"),]
plot(validation$pollen_count, type = 'l')
plot(validation$pollen_count, type = 'l', xlab = "Days Since 1 January",
ylab = "Pollen Count")
setwd("~/Documents/2020/Thesis Project/grass-pollen/Presentation")
pdf("1 Year Counts", width=10, height=7)
plot(validation$pollen_count, type = 'l', xlab = "Days Since 1 January",
ylab = "Pollen Count")
dev.off()
pdf("1 Year Counts.pdf", width=10, height=7)
plot(validation$pollen_count, type = 'l', xlab = "Days Since 1 January",
ylab = "Pollen Count")
dev.off()
