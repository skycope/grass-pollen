ggplot(aes(x = ds, y = value, colour = variable)) +
geom_point(colour = 'black', size = 0.8, alpha = 0.6) +
geom_point(alpha = 0.8, size = 0.7) +
geom_smooth(colour = 'black', linetype = 'solid') +
facet_wrap(. ~ variable,
scales = 'free', nrow = 3) +
theme_bw() +
xlab("Days Since Start of Year") +
theme(legend.position = 'none')
# Investigating differences in pollen counts at different wind directions
# Make a binary variable for wind direction
# Make another binary variable
data_new <- data %>% filter(value <= 50) %>%
mutate(wind_dir_bin = case_when(
value.wind_dir > 100 & value.wind_dir < 200 ~ "dir1",
value.wind_dir <= 100 | value.wind_dir >= 200 ~ "dir2"
)) %>%
mutate(pollen_bin = case_when(value == 0 ~ 'zero',
value > 0 ~ '> zero')) %>%
na.omit()
# Make a histogram for pollen count at each wind direction
ggplot(data_new, aes(x = value, fill = wind_dir_bin)) +
geom_histogram(aes(y = ..density..), colour = 'black') +
facet_wrap(.~ wind_dir_bin) +
theme_bw()
# At wind direction 1 there are higher pollen counts on average!
# Might be interesting to explore further
# Permutation t test for differences in pollen count at different wind directions
value_dir1 <- data_new %>% filter(wind_dir_bin == 'dir1') %>% select(value) %>% as.matrix() # select values when wind is dir1
value_dir2 <- data_new %>% filter(wind_dir_bin == 'dir2') %>% select(value) %>% as.matrix() # select values when wind is dir2
values <- c(value_dir1, value_dir2)
directions <- factor(rep(c("dir1", "dir2"), c(length(value_dir1), length(value_dir2))))
oneway_test(values ~ directions, alternative = "greater",
distribution=approximate(nresample = 9999))  # Permutation t-test using coin package
# try PCA
pca_pollen <- data_new %>% na.omit() %>% select(-X, -date, -logvalue, -wind_dir_bin, -pollen_bin, -value) %>% prcomp(scale = T)
summary(pca_pollen)
# Biplot
fviz_pca_biplot(pca_pollen, geom = 'point')
# Project data points onto PCA axes
# See whether pollen categories are well seperated in two dimensions
proj <- as.data.frame(pca_pollen$x)
ggplot(proj) + geom_point(aes(x = proj[,1], y = proj[,2], colour = data_new$pollen_bin))
# Some bivariate plots:
data_new %>% na.omit() %>% select(-X, -date, logvalue, -wind_dir_bin, -pollen_bin, -logvalue, -rain.lag1, -rain.lag2) %>%
ggpairs()
# The South African Astronomical Observatory latitude and longitude:
# -33.9345,18.4771
loc = "Cape+Town"
URL = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?location=Cape+Town&aggregateHours=24&unitGroup=us&shortColumnNames=false&contentType=json&key=D93BEE3MG1DDV9HFKD4TDZ2B3"
{
library(request)
library(jsonlite)
library(httr)
}
URL = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?location=Cape+Town&aggregateHours=24&unitGroup=us&shortColumnNames=false&contentType=json&key=D93BEE3MG1DDV9HFKD4TDZ2B3"
res = GET(URL)
str(res)
data = fromJSON(rawToChar(res$content))
information = data$locations$'Cape Town'$values
information
# The South African Astronomical Observatory latitude and longitude:
# -33.9345,18.4771
type = "forecast"
loc = "Cape+Town"
a.hrs = "24"
unit = "metric"
key = "D93BEE3MG1DDV9HFKD4TDZ2B3"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type, "?location=", loc, "&aggregateHours=", a.hrs,
"&unitGroup=metric&shortColumnNames=false&contentType=json&key=", key, sep = "")
URL
res = GET(URL)
str(res)
data = fromJSON(rawToChar(res$content))
information = data$locations$'Cape Town'$values
information
request = GET(URL)
data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values
data
data
str(data)
as.Date("2020-09-05T00:00:00+02:00")
?as.Date
data$datetimeStr = as.Date(data$datetimeStr)
data
str(data)
data
data
data$conditions = as.factor(data$conditions)
data
str(data)
data
str(data)
library(request)
library(jsonlite)
library(httr)
data
str(data)
names(data)
names(data)
data.clean = data[,c(10,2,3)]
data.clean
data.clean = data[,c(6, # date
10, 2, 3, # temp
1, 5, 16, # wind
12, 9, 15, # precip
4, 8, 17 )] # conditions
data.clean
plot(data.clean)
type = "history"
type = "history"
a.hrs = "24"
# Set forecast parameters for API request
type = "forecast"
loc = "Cape+Town"
a.hrs = "24"
key = "D93BEE3MG1DDV9HFKD4TDZ2B3"
type = "history"
a.hrs = "24"
start =  "" # 2019-06-13T00:00:00
end = "" # 2019-06-13T00:00:00
loc = "Cape+Town"
type = "history"
a.hrs = "24"
startDate =  "" # 2019-06-13T00:00:00
endDate = "" # 2019-06-13T00:00:00
type = "history"
a.hrs = "24"
startDate =  "2010-08-24T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2015-05-31T00:00:00" # yyyy-mm-ddT00:00:00
loc = "Cape+Town"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=uk&contentType=json&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key)
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
URL
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=uk&contentType=json&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
URL
startDate =  "2010-08-24T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2011-05-31T00:00:00" # yyyy-mm-ddT00:00:00
loc = "Cape+Town"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=uk&contentType=json&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
type = "history"
a.hrs = "24"
startDate =  "2010-08-24T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2015-05-31T00:00:00" # yyyy-mm-ddT00:00:00
loc = "Cape+Town"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=uk&contentType=json&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
URL
key = "D93BEE3MG1DDV9HFKD4TDZ2B3"
URL = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?&aggregateHours=24&startDateTime=2019-06-13T00:00:00&endDateTime=2019-06-20T00:00:00&unitGroup=uk&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=Sterling,VA,US&key=YOURAPIKEY"
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
URL = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?&aggregateHours=24&startDateTime=2019-06-13T00:00:00&endDateTime=2019-06-20T00:00:00&unitGroup=uk&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=Sterling,VA,US&key=D93BEE3MG1DDV9HFKD4TDZ2B3"
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
loc = "-33.9345,18.4771"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=json&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
URL
URL = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?&aggregateHours=24&startDateTime=2019-06-13T00:00:00&endDateTime=2019-06-20T00:00:00&unitGroup=uk&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=Sterling,VA,US&key=D93BEE3MG1DDV9HFKD4TDZ2B3"
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
key = "PZSMCLY0TV8WDVR85EKPBLMYQ"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
startDate =  "2010-08-24T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2015-08-28T00:00:00" # yyyy-mm-ddT00:00:00
loc = "-33.9345,18.4771"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
key
key = "PZSMCLY0TV8WDVR85EKPBLMYQ"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
key = "D93BEE3MG1DDV9HFKD4TDZ2B3"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
endDate = "2015-08-25T00:00:00" # yyyy-mm-ddT00:00:00
loc = "-33.9345,18.4771"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
key = "94PTQDZ21VSDMHHT2XVFJK40U"
type = "history"
a.hrs = "24"
startDate =  "2010-08-24T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2010-08-25T00:00:00" # yyyy-mm-ddT00:00:00
loc = "-33.9345,18.4771"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
# Make API request, extract required data
request = GET(URL)
(data = fromJSON(rawToChar(request$content))$locations$'Cape Town'$values)
request$content
rawToChar(request$content)
(data = (rawToChar(request$content))$locations$'Cape Town'$values)
typeof(rawToChar(request$content))
request
str(request)
request$content
(data = fromCSV(rawToChar(request$content))$locations$'Cape Town'$values)
historical = read.csv(URL)
historical
startDate =  "2010-08-24T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2011-08-24T00:00:00" # yyyy-mm-ddT00:00:00
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
historical = read.csv(URL)
historical
x = as.Date(2010-08-24T00:00:00)
x = as.Date("2010-08-24T00:00:00")
x
x+100
x = as.Date("2011-01-01")
x+100
startDate =  "2011-01-01T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2011-04-11T00:00:00" # yyyy-mm-ddT00:00:00
loc = "-33.9345,18.4771"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
historical = read.csv(URL)
historical
build = historical
x = as.Date("2011-04-12")
x+100
startDate =  "2011-04-12T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2011-07-21T00:00:00" # yyyy-mm-ddT00:00:00
loc = "-33.9345,18.4771"
key = "PZSMCLY0TV8WDVR85EKPBLMYQ"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
historical.2 = read.csv(URL)
historical.2
build = rbind(historical, historical.2)
build
str(build)
nrow(build)
head(build)
startDate =  "2011-07-22T00:00:00" # yyyy-mm-ddT00:00:00
x = as.Date("2011-07-22")
x+100
endDate = "2011-10-30T00:00:00" # yyyy-mm-ddT00:00:00
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
key = "D93BEE3MG1DDV9HFKD4TDZ2B3"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
historical.2 = read.csv(URL)
historical.3 = read.csv(URL)
startDate =  "2011-04-12T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2011-07-21T00:00:00" # yyyy-mm-ddT00:00:00
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
historical.2 = read.csv(URL)
build = rbind(historical, historical.2, historical.3)
x = as.Date("2011-10-30")
x+100
startDate =  "2011-10-30T00:00:00" # yyyy-mm-ddT00:00:00
endDate = "2012-02-07T00:00:00" # yyyy-mm-ddT00:00:00
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
historical.4 = read.csv(URL)
key = "94PTQDZ21VSDMHHT2XVFJK40U"
historical.4 = read.csv(URL)
historical.4
key = "PZSMCLY0TV8WDVR85EKPBLMYQ"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
historical.4 = read.csv(URL)
x = as.Date("2012-02-08")
x+100
endDate = "2012-05-18T00:00:00" # yyyy-mm-ddT00:00:00
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
historical.5 = read.csv(URL)
key = "94PTQDZ21VSDMHHT2XVFJK40U"
URL = paste("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/",
type , "?&aggregateHours=", a.hrs, "&startDateTime=", startDate, "&endDateTime=", endDate,
"&unitGroup=metric&contentType=csv&dayStartTime=0:0:00&dayEndTime=0:0:00&location=", loc, "&key=", key, sep = "")
historical.5 = read.csv(URL)
build = rbind(historical, historical.2, historical.3, historical.4)
str(build)
?as.Date
x = as.Date("01/01/2011")
x
x = as.Date("01/01/2011", format = "%d/%m/%Y")
x
build$Date.time = as.Date(build$Date.time, format = "%d/%m/%Y")
build$Conditions = as.factor(build$Conditions)
str(build)
names(build)
build_clean = build[,c(2, # Date
3, 4, 5, #temp
6, 7, 13, # precip, humid, dewpoint
9, 10, 11, # wind
16, 23 # cloudcov & conditions
)]
head(build_clean)
build_clean = build[,c(2, # Date
3, 4, 5, #temp
6, 7, 13, # precip, humid, dewpoint
9, 11, # wind
16, 23 # cloudcov & conditions
)]
head(build_clean)
is.na(build_clean)
x = is.na(build_clean)
x
sum(x)
build$Date.time
build$Minimum.Temperature
length(build$Date.time)
length(build$Minimum.Temperature)
tail(build$Date.time)
build$Info
head(build$Date.time)
Date =  seq(from = as.Date("2011-01-01"), to = as.Date("2012-07-02"), by = 'day')
build_clean[,1] = Date
nrow(build_clean)
build$Date.time
x = as.Date("2011-01-01")
x+404
build = rbind(historical, historical.2, historical.3, historical.4)
build$Date.time
build$Date.time = as.Date(build$Date.time, format = "%m/%d/%Y")
build$Conditions = as.factor(build$Conditions)
names(build)
build_clean = build[,c(2, # Date
3, 4, 5, #temp
6, 7, 13, # precip, humid, dewpoint
9, 11, # wind
16, 23 # cloudcov & conditions
)]
head(build_clean)
str(build_clean)
sum(is.na(build_clean))
build_clean
grassData = read.csv("grassdata.csv", header = TRUE)
head(grassData)
?first
first(build_clean$Date.time)
count = grassData[, 'value']
count
count = grassData[first(build_clean$Date.time): last(build_clean$Date.time), 'value']
count
first(build_clean$Date.time)
last(build_clean$Date.time)
grassData$date
first(build_clean$Date.time):last(build_clean$Date.time)
first(build_clean$Date.time)
last(build_clean$Date.time)
grassData[grassData$date>= first(build_clean$Date.time)]
s = first(build_clean$Date.time)
s
typeof(s)
str(build_clean)
grassData[grassData$date>= as.Date(first(build_clean$Date.time))]
as.Date(first(build_clean$Date.time))
typeof(grassData$date)
grassData$date = as.Date(grassData$date)
grassData$date
grassData[grassData$date >= as.Date(first(build_clean$Date.time))]
as.Date(first(build_clean$Date.time))
grassData
str(grassData)
s = first(build_clean$Date.time)
grassData[grassData$date >= first(build_clean$Date.time)]
grassData[grassData$date >= first(build_clean$Date.time),]
grassData[grassData$date >= first(build_clean$Date.time) & grassData$date <= last(build_clean$Date.time),]
count = grassData[grassData$date >= first(build_clean$Date.time) & grassData$date <= last(build_clean$Date.time),][, 'value']
count
length(count)
sum(is.na(grassData$value))
sum(is.na(grassData$date))
grassDataDf = as.data.frame(grassData)
grassDataDf$date
grassDataDf$date = as.POSIXct(grassDataDf$date,format="%Y/%m/%d")
?zoo
grassDataDf.zoo<-zoo(grassDataDf[,-1],grassDataDf[,1]) #set date to Index
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
library(zoo)
grassDataDf
grassDataDf.zoo<-zoo(grassDataDf[,-1],grassDataDf[,1]) #set date to Index
grassDataDf.zoo
grassDataDf_na <- merge(grassDataDf.zoo,zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo),by="min")), all=TRUE)
grassDataDf_na <- merge(grassDataDf.zoo, zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo),by="day")), all=TRUE)
grassDataDf_na <- merge(grassDataDf.zoo, zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo))), all=TRUE)
grassDataDf_na
grassDataDf_na <- merge(grassDataDf.zoo, zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo))), all=TRUE)
typeof(grassDataDf_na)
sum(is.na(grassDataDf_na))
start(grassDataDf.zoo)
end(grassDataDf.zoo)
grassData = read.csv("grassdata.csv", header = TRUE)
grassDataDf = as.data.frame(grassData)
grassDataDf$date = as.POSIXct(grassDataDf$date,format="%Y/%m/%d")
grassDataDf$date
?as.POSIXct
grassData = read.csv("grassdata.csv", header = TRUE)
grassData$date = as.Date(grassData$date)
grassDataDf = as.data.frame(grassData)
#grassDataDf$date = as.POSIXct(grassDataDf$date,format="%Y/%m/%d")
grassDataDf.zoo<-zoo(grassDataDf[,-1],grassDataDf[,1]) #set date to Index
grassDataDf_na <- merge(grassDataDf.zoo, zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo))), all=TRUE)
sum(is.na(grassDataDf_na))
grassDataDf.zoo
grassDataDf[,-1]
?zoo
grassDataDf.zoo
seq(start(grassDataDf.zoo),end(grassDataDf.zoo)
)
grassDataDf_na <- merge(grassDataDf.zoo, zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo), by = "min")), all=TRUE)
zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo), by = "min"))
seq(start(grassDataDf.zoo),end(grassDataDf.zoo), by = "min")
start(grassDataDf.zoo)
end(grassDataDf.zoo)
zoo(grassDataDf[,-1],grassDataDf[,1])
tail(grassDataDf.zoo)
head()
head(grassDataDf.zoo)
x = as.Date("2010-08-24")
x
y = as.Date("2015-05-31")
y-x
grassDataDf_na <- merge(grassDataDf.zoo, zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo), by = "day")), all=TRUE)
start(grassDataDf.zoo)
grassDataDf_na <- merge(grassDataDf.zoo, zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo), by = 1)), all=TRUE)
grassDataDf_na <- merge(grassDataDf.zoo, zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo), by = "day")), all=TRUE)
as.POSIXct(grassDataDf$date,format="%Y/%m/%d")
grassDataDf = as.data.frame(grassData)
grassDataDf$date = as.POSIXct(grassDataDf$date,format="%Y/%m/%d")
grassDataDf$date
grassDataDf.zoo<-zoo(grassDataDf[,-1],grassDataDf[,1]) #set date to Index
grassDataDf_na <- merge(grassDataDf.zoo, zoo(,seq(start(grassDataDf.zoo),end(grassDataDf.zoo), by = "day")), all=TRUE)
count
grassData
count = grassData[grassData$date >= first(build_clean$Date.time) & grassData$date <= last(build_clean$Date.time),][, c('date','value')]
library(request)
library(jsonlite)
library(httr)
library(zoo)
count = grassData[grassData$date >= first(build_clean$Date.time) & grassData$date <= last(build_clean$Date.time),][, c('date','value')]
first(build_clean$Date.time)
library(pastecs)
install.packages("pastecs")
library(pastecs)
count = grassData[grassData$date >= first(build_clean$Date.time) & grassData$date <= last(build_clean$Date.time),][, c('date','value')]
head(count)
first(count)
first(count$date)
last(count$date)
x = first(count$date)
y = last(count$date)
y-x
nrow(count)
