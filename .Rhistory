splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
rf_gridsearch <- train(value ~ .,
data = train,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
}
plot(varImp(rf_gridsearch))
(varImportance = varImp(rf_gridsearch))
par(mfrow = c(1, 1))
yhat          = predict(rf_gridsearch, test)
y             = test$value
(models_RMSE[4,1] = mean((y - yhat)^2))
cor(y, yhat)^2
plot(yhat ~ y)
abline(0, 1, col = 'red')
cor(y, yhat)
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
yIn     = (test %>% filter(season == "In"))$value
yOut    = (test %>% filter(season == "Out"))$value
yhatIn  = yhat[which(test$season == "In")]
yhatOut = yhat[which(test$season == "Out")]
(models_RMSE[4,2] = mean((yIn - yhatIn)^2))   # 68.3992
cor(yIn, yhatIn)^2       # 0.4778134
plot(yIn ~ yhatIn)
abline(0, 1, col = 'red')
(models_RMSE[4,3] = mean((yOut - yhatOut)^2)) # 11.13848
cor(yOut, yhatOut)^2     # 0.03024854
plot(yOut ~ yhatOut)
abline(0, 1, col = 'red')
models_RMSE
(varImportance = varImp(rf_gridsearch))
varImportance
nrow(varImportance)
varImportance = data.frame(varImportance[1])
varImportance
varImportance = data.frame(varImportance[1])
varImp_names  = rownames(varImportance)
varImp_names
order()
varImportance = data.frame(order(varImportance[1]))
varImp_names  = rownames(varImportance)
varImp_names
varImportance
varImp_names  = rownames(order(varImportance))
varImportance = data.frame(varImportance[1])
varImp_names  = rownames(order(varImportance))
varImp_names
varImportance = data.frame(varImportance[1])
varImp_names  = rownames(varImportance)
varImp_names
varImportance = data.frame(varImportance[1])
(varImportance = varImp(rf_gridsearch))
varImportance = data.frame(varImportance[1])
varImp_names  = order(rownames(varImportance))
varImp_names
(varImportance = varImp(rf_gridsearch))
plot(varImp(rf_gridsearch))
models_RMSE
rf_data <- dplyr::select(merged, -logvalue, -date, -Range) %>%
mutate(count_lag1 = lag(value, 1),
count_lag2 = lag(value, 1),
count_lag3 = lag(value, 1),
count_lag4 = lag(value, 1),
count_lag5 = lag(value, 1),
maxtemp.anom_lag1 = lag(maxtemp.anom, 1),
maxtemp.anom_lag2 = lag(maxtemp.anom, 2),
maxtemp.anom_lag3 = lag(maxtemp.anom, 3),
maxtemp.anom_lag4 = lag(maxtemp.anom, 4),
Visibility_lag1   = lag(Visibility, 1),
Visibility_lag2   = lag(Visibility, 2),
Visibility_lag3   = lag(Visibility, 3),
Visibility_lag4   = lag(Visibility, 4),
value.wind_speed_lag1    = lag(value.wind_speed, 1),
value.wind_speed_lag2    = lag(value.wind_speed, 2),
value.wind_speed_lag3    = lag(value.wind_speed, 3),
value.humid_lag1         = lag(value.humid, 1),
value.humid_lag2         = lag(value.humid, 2),
value.humid_lag3         = lag(value.humid, 3),
VI_mean_lag1 = lag(Mean, 16),
VI_mean_lag2 = lag(Mean, 32),
VI_mean_lag3 = lag(Mean, 48),
VI_max_lag1 = lag(Maximum, 16),
VI_max_lag2 = lag(Maximum, 32),
VI_max_lag3 = lag(Maximum, 48),
VI_count_lag1 = lag(Count, 16),
VI_count_lag2 = lag(Count, 32),
VI_count_lag3 = lag(Count, 48),
VI_up15_lag1 = lag(Upper.1.5.IQR, 16),
VI_up15_lag2 = lag(Upper.1.5.IQR, 32),
VI_up15_lag3 = lag(Upper.1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
value.wind_dir > 100 & value.wind_dir < 200 ~ "dir1",
value.wind_dir <= 100 | value.wind_dir >= 200 ~ "dir2"
)) %>% mutate(count_cat_in = case_when(
value < 1 ~ "Very low",
value > 1 & value <= 4 ~ "Low",
value > 4 & value <= 8 ~ "Moderate",
value > 8 & value <= 14.8 ~ "High",
value > 14.8 ~ "Very high")
) %>% dplyr::select(-count_cat_in) %>% na.omit()
train <- filter(rf_data, fyear != 2011)
test <- filter(rf_data, fyear == 2011)
train <- filter(rf_data, fyear != testYear)
test <- filter(rf_data, fyear == testYear)
summary(rf_data$fyear)
rf_grid <- expand.grid(mtry = 10:20,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
rf_gridsearch <- train(value ~ .,
data = train,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
plot(varImp(rf_gridsearch))
(varImportance = varImp(rf_gridsearch))
plot(varImp(rf_gridsearch))
(varImportance = varImp(rf_gridsearch))
par(mfrow = c(1, 1))
yhat          = predict(rf_gridsearch, test)
y             = test$value
(models_RMSE[5,1] = mean((y - yhat)^2))
cor(y, yhat)^2
plot(yhat ~ y)
abline(0, 1, col = 'red')
cor(y, yhat)
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
yIn     = (test %>% filter(season == "In"))$value
yOut    = (test %>% filter(season == "Out"))$value
yhatIn  = yhat[which(test$season == "In")]
yhatOut = yhat[which(test$season == "Out")]
(models_RMSE[5,2] = mean((yIn - yhatIn)^2))   # 68.3992
cor(yIn, yhatIn)^2       # 0.4778134
plot(yIn ~ yhatIn)
abline(0, 1, col = 'red')
(models_RMSE[5,3] = mean((yOut - yhatOut)^2)) # 11.13848
cor(yOut, yhatOut)^2     # 0.03024854
plot(yOut ~ yhatOut)
abline(0, 1, col = 'red')
models_RMSE
testYear = 2012
# 1. Model ----------
{
# Create lag values
rf_data = dplyr::select(grassdata, -logvalue, -date) %>%
mutate(count_cat_in = case_when(
value < 1 ~ "Very low",
value > 1 & value <= 4 ~ "Low",
value > 4 & value <= 8 ~ "Moderate",
value > 8 & value <= 14.8 ~ "High",
value > 14.8 ~ "Very high")) %>% mutate(season = case_when(
ds > 240 | ds < 30 ~ "In",
ds >= 30 | ds <= 240 ~ "Out"
)) %>% dplyr::select(-count_cat_in) %>% na.omit()
train = filter(rf_data, fyear != testYear)
test  = filter(rf_data, fyear == testYear)
summary(rf_data$fyear)
rf_grid = expand.grid(mtry = 10:20,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl    = trainControl(method = 'oob', verboseIter = T)
rf_gridsearch = train(value ~ .,
data = train,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
}
plot(varImp(rf_gridsearch))
(varImportance = varImp(rf_gridsearch))
par(mfrow = c(1, 1))
yhat           = predict(rf_gridsearch, test)
y              = test$value
(models_RMSE[1,1] = mean((y - yhat)^2))
# 35.6903
plot(yhat ~ y)
abline(0, 1, col = 'red')
cor(y, yhat)^2
# 0.574835
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
# How well does it perform in and out of season?
yIn     = (test %>% filter(season == "In"))$value
yOut    = (test %>% filter(season == "Out"))$value
yhatIn  = yhat[which(test$season == "In")]
yhatOut = yhat[which(test$season == "Out")]
(models_RMSE[1,2] = mean((yIn - yhatIn)^2))   # 68.3992
cor(yIn, yhatIn)^2       # 0.4778134
plot(yIn ~ yhatIn)
abline(0, 1, col = 'red')
(models_RMSE[1,3] = mean((yOut - yhatOut)^2)) # 11.13848
cor(yOut, yhatOut)^2     # 0.03024854
plot(yOut ~ yhatOut)
abline(0, 1, col = 'red')
# 2. Model ----------
{
# Create lag values
rf_data <- dplyr::select(merged, -logvalue, -date, -Range) %>%
mutate(count_cat_in = case_when(
value < 1 ~ "Very low",
value > 1 & value <= 4 ~ "Low",
value > 4 & value <= 8 ~ "Moderate",
value > 8 & value <= 14.8 ~ "High",
value > 14.8 ~ "Very high")
) %>% dplyr::select(-count_cat_in) %>% na.omit()
train <- filter(rf_data, fyear != testYear)
test <- filter(rf_data, fyear == testYear)
summary(rf_data$fyear)
rf_grid <- expand.grid(mtry = 10:20,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
rf_gridsearch <- train(value ~ .,
data = train,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
}
plot(varImp(rf_gridsearch))
(varImportance = varImp(rf_gridsearch))
par(mfrow = c(1, 1))
yhat          = predict(rf_gridsearch, test)
y             = test$value
(models_RMSE[2,1] = mean((y - yhat)^2))
# 65.04818
cor(y, yhat)^2
plot(yhat ~ y)
abline(0, 1, col = 'red')
cor(y, yhat)
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
# How well does it perform in and out of season?
yIn     = (test %>% filter(season == "In"))$value
yOut    = (test %>% filter(season == "Out"))$value
yhatIn  = yhat[which(test$season == "In")]
yhatOut = yhat[which(test$season == "Out")]
(models_RMSE[2,2] = mean((yIn - yhatIn)^2))   # 126.2724
cor(yIn, yhatIn)^2
plot(yIn ~ yhatIn)
abline(0, 1, col = 'red')
(models_RMSE[2,3] = mean((yOut - yhatOut)^2)) # 2.811988
cor(yOut, yhatOut)^2
plot(yOut ~ yhatOut)
abline(0, 1, col = 'red')
# 3. Model -----------
# Create lag values
{
rf_data <- dplyr::select(merged, -logvalue, -date, -Range) %>%
mutate(count_lag1 = lag(value, 1),
count_lag2 = lag(value, 1),
count_lag3 = lag(value, 1),
count_lag4 = lag(value, 1),
count_lag5 = lag(value, 1)) %>%
mutate(count_cat_in = case_when(
value < 1 ~ "Very low",
value > 1 & value <= 4 ~ "Low",
value > 4 & value <= 8 ~ "Moderate",
value > 8 & value <= 14.8 ~ "High",
value > 14.8 ~ "Very high")
) %>% dplyr::select(-count_cat_in) %>% na.omit()
train <- filter(rf_data, fyear != testYear)
test <- filter(rf_data, fyear == testYear)
summary(rf_data$fyear)
rf_grid <- expand.grid(mtry = 10:20,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
rf_gridsearch <- train(value ~ .,
data = train,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
}
plot(varImp(rf_gridsearch))
(varImportance = varImp(rf_gridsearch))
par(mfrow = c(1, 1))
yhat          = predict(rf_gridsearch, test)
y             = test$value
(models_RMSE[3,1] = mean((y - yhat)^2))
cor(y, yhat)^2
plot(yhat ~ y)
abline(0, 1, col = 'red')
cor(y, yhat)
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
# How well does it perform in and out of season?
yIn     = (test %>% filter(season == "In"))$value
yOut    = (test %>% filter(season == "Out"))$value
yhatIn  = yhat[which(test$season == "In")]
yhatOut = yhat[which(test$season == "Out")]
(models_RMSE[3,2] = mean((yIn - yhatIn)^2))   # 68.3992
cor(yIn, yhatIn)^2       # 0.4778134
plot(yIn ~ yhatIn)
abline(0, 1, col = 'red')
(models_RMSE[3,3] = mean((yOut - yhatOut)^2)) # 11.13848
cor(yOut, yhatOut)^2     # 0.03024854
plot(yOut ~ yhatOut)
abline(0, 1, col = 'red')
# 4. Model -----------
# Create lag values
{
rf_data <- dplyr::select(merged, -logvalue, -date, -Range) %>%
mutate(count_lag1 = lag(value, 1),
count_lag2 = lag(value, 1),
count_lag3 = lag(value, 1),
count_lag4 = lag(value, 1),
count_lag5 = lag(value, 1),
maxtemp.anom_lag1 = lag(maxtemp.anom, 1),
maxtemp.anom_lag2 = lag(maxtemp.anom, 2),
maxtemp.anom_lag3 = lag(maxtemp.anom, 3),
maxtemp.anom_lag4 = lag(maxtemp.anom, 4),
Visibility_lag1   = lag(Visibility, 1),
Visibility_lag2   = lag(Visibility, 2),
Visibility_lag3   = lag(Visibility, 3),
Visibility_lag4   = lag(Visibility, 4),
value.wind_speed_lag1    = lag(value.wind_speed, 1),
value.wind_speed_lag2    = lag(value.wind_speed, 2),
value.wind_speed_lag3    = lag(value.wind_speed, 3),
value.humid_lag1         = lag(value.humid, 1),
value.humid_lag2         = lag(value.humid, 2),
value.humid_lag3         = lag(value.humid, 3)) %>%
mutate(wind_dir_bin = case_when(
value.wind_dir > 100 & value.wind_dir < 200 ~ "dir1",
value.wind_dir <= 100 | value.wind_dir >= 200 ~ "dir2"
)) %>% mutate(count_cat_in = case_when(
value < 1 ~ "Very low",
value > 1 & value <= 4 ~ "Low",
value > 4 & value <= 8 ~ "Moderate",
value > 8 & value <= 14.8 ~ "High",
value > 14.8 ~ "Very high")
) %>% dplyr::select(-count_cat_in) %>% na.omit()
train <- filter(rf_data, fyear != testYear)
test <- filter(rf_data, fyear == testYear)
summary(rf_data$fyear)
rf_grid <- expand.grid(mtry = 10:20,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
rf_gridsearch <- train(value ~ .,
data = train,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
}
plot(varImp(rf_gridsearch))
(varImportance = varImp(rf_gridsearch))
par(mfrow = c(1, 1))
yhat          = predict(rf_gridsearch, test)
y             = test$value
(models_RMSE[4,1] = mean((y - yhat)^2))
cor(y, yhat)^2
plot(yhat ~ y)
abline(0, 1, col = 'red')
cor(y, yhat)
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
# How well does it perform in and out of season?
yIn     = (test %>% filter(season == "In"))$value
yOut    = (test %>% filter(season == "Out"))$value
yhatIn  = yhat[which(test$season == "In")]
yhatOut = yhat[which(test$season == "Out")]
(models_RMSE[4,2] = mean((yIn - yhatIn)^2))   # 68.3992
cor(yIn, yhatIn)^2       # 0.4778134
plot(yIn ~ yhatIn)
abline(0, 1, col = 'red')
(models_RMSE[4,3] = mean((yOut - yhatOut)^2)) # 11.13848
cor(yOut, yhatOut)^2     # 0.03024854
plot(yOut ~ yhatOut)
abline(0, 1, col = 'red')
# 5. Model -----------
# Create lag values
{
rf_data <- dplyr::select(merged, -logvalue, -date, -Range) %>%
mutate(count_lag1 = lag(value, 1),
count_lag2 = lag(value, 1),
count_lag3 = lag(value, 1),
count_lag4 = lag(value, 1),
count_lag5 = lag(value, 1),
maxtemp.anom_lag1 = lag(maxtemp.anom, 1),
maxtemp.anom_lag2 = lag(maxtemp.anom, 2),
maxtemp.anom_lag3 = lag(maxtemp.anom, 3),
maxtemp.anom_lag4 = lag(maxtemp.anom, 4),
Visibility_lag1   = lag(Visibility, 1),
Visibility_lag2   = lag(Visibility, 2),
Visibility_lag3   = lag(Visibility, 3),
Visibility_lag4   = lag(Visibility, 4),
value.wind_speed_lag1    = lag(value.wind_speed, 1),
value.wind_speed_lag2    = lag(value.wind_speed, 2),
value.wind_speed_lag3    = lag(value.wind_speed, 3),
value.humid_lag1         = lag(value.humid, 1),
value.humid_lag2         = lag(value.humid, 2),
value.humid_lag3         = lag(value.humid, 3),
VI_mean_lag1 = lag(Mean, 16),
VI_mean_lag2 = lag(Mean, 32),
VI_mean_lag3 = lag(Mean, 48),
VI_max_lag1 = lag(Maximum, 16),
VI_max_lag2 = lag(Maximum, 32),
VI_max_lag3 = lag(Maximum, 48),
VI_count_lag1 = lag(Count, 16),
VI_count_lag2 = lag(Count, 32),
VI_count_lag3 = lag(Count, 48),
VI_up15_lag1 = lag(Upper.1.5.IQR, 16),
VI_up15_lag2 = lag(Upper.1.5.IQR, 32),
VI_up15_lag3 = lag(Upper.1.5.IQR, 48)) %>%
mutate(wind_dir_bin = case_when(
value.wind_dir > 100 & value.wind_dir < 200 ~ "dir1",
value.wind_dir <= 100 | value.wind_dir >= 200 ~ "dir2"
)) %>% mutate(count_cat_in = case_when(
value < 1 ~ "Very low",
value > 1 & value <= 4 ~ "Low",
value > 4 & value <= 8 ~ "Moderate",
value > 8 & value <= 14.8 ~ "High",
value > 14.8 ~ "Very high")
) %>% dplyr::select(-count_cat_in) %>% na.omit()
train <- filter(rf_data, fyear != testYear)
test <- filter(rf_data, fyear == testYear)
summary(rf_data$fyear)
rf_grid <- expand.grid(mtry = 10:20,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
ctrl <- trainControl(method = 'oob', verboseIter = T)
rf_gridsearch <- train(value ~ .,
data = train,
method = 'ranger',
num.trees = 2000,
verbose = T,
importance = 'impurity',
trControl = ctrl,
tuneGrid = rf_grid) #Here is the grid
}
plot(varImp(rf_gridsearch))
(varImportance = varImp(rf_gridsearch))
par(mfrow = c(1, 1))
yhat          = predict(rf_gridsearch, test)
y             = test$value
(models_RMSE[5,1] = mean((y - yhat)^2))
cor(y, yhat)^2
plot(yhat ~ y)
abline(0, 1, col = 'red')
cor(y, yhat)
plot(y, type = 'l')
lines(yhat, col = 'red', type = 'l')
# How well does it perform in and out of season?
yIn     = (test %>% filter(season == "In"))$value
yOut    = (test %>% filter(season == "Out"))$value
yhatIn  = yhat[which(test$season == "In")]
yhatOut = yhat[which(test$season == "Out")]
(models_RMSE[5,2] = mean((yIn - yhatIn)^2))   # 68.3992
cor(yIn, yhatIn)^2       # 0.4778134
plot(yIn ~ yhatIn)
abline(0, 1, col = 'red')
(models_RMSE[5,3] = mean((yOut - yhatOut)^2)) # 11.13848
cor(yOut, yhatOut)^2     # 0.03024854
plot(yOut ~ yhatOut)
abline(0, 1, col = 'red')
# Reduce number of variables --------
varImportance = data.frame(varImportance[1])
varImp_names  = order(rownames(varImportance))
# GBM -------------
ctrl <- trainControl(method = 'cv', number = 10, verboseIter = T)
gbm_grid <- expand.grid(n.trees = c(300, 500, 1000), # Try these numbers of trees
interaction.depth = c(1, 2, 6), # Try these interaction depths
shrinkage = c(0.01, 0.005, 0.001), #
n.minobsinnode = 1) # Set min node size to 1
gbm_gridsearch <- train(value ~ ., data = train,
method = 'gbm',
distribution = 'gaussian', # Because its a regression problem
trControl = ctrl,
verbose = F, # Keeps me updated on the progress
tuneGrid = gbm_grid)
yhat_gbm <- predict(gbm_gridsearch, test)
data.frame(`GBM` = yhat_gbm, 'Random Forest' = yhat, Actual = y) %>%
mutate(x = 1:nrow(.)) %>%
melt(id.vars = 'x') %>%
rename('Pollen Count' = value, 'Model' = variable) %>%
ggplot(aes(x, `Pollen Count`, colour = Model)) +
geom_line() +
facet_wrap(.~Model, nrow = 3) +
xlab("Day Number") +
theme_minimal()
plot(yhat_gbm ~ y)
cor(yhat_gbm, y)^2
abline(0, 1)
yhat_gbm2 = c(yhat_gbm[1:280], c(0))
cor(yhat_gbm2, y)^2
plot(yhat_gbm2, type = 'l')
lines(y, col = 'red')
models_RMSE
# Save wworkspace ------------
save.image('RF_draft_workspace.RData')
