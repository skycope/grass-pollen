cor(as.numeric(oneday_predict_ds), ma_val$pollen_count)^2
# assess performance
plot(ema_val$pollen_count, type = 'l')
lines(oneday_predict_ema, col = 'red')
lines(oneday_predict_ma, col = 'blue')
lines(oneday_predict_ds, col = 'orange')
# assess category performance
# get EMA categories
ema_cat = case_when(
oneday_predict_ema < 1 ~ "Very low",
oneday_predict_ema >= 1 & oneday_predict_ema < 3 ~ "Low",
oneday_predict_ema >= 3 & oneday_predict_ema < 8 ~ "Moderate",
oneday_predict_ema >= 8 & oneday_predict_ema < 14.8 ~ "High",
oneday_predict_ema >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# get MA categories
ma_cat = case_when(
oneday_predict_ma < 1 ~ "Very low",
oneday_predict_ma >= 1 & oneday_predict_ma < 3 ~ "Low",
oneday_predict_ma >= 3 & oneday_predict_ma < 8 ~ "Moderate",
oneday_predict_ma >= 8 & oneday_predict_ma < 14.8 ~ "High",
oneday_predict_ma >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# DS model categories
ds_cat = case_when(
oneday_predict_ds < 1 ~ "Very low",
oneday_predict_ds >= 1 & oneday_predict_ds < 3 ~ "Low",
oneday_predict_ds >= 3 & oneday_predict_ds < 8 ~ "Moderate",
oneday_predict_ds >= 8 & oneday_predict_ds < 14.8 ~ "High",
oneday_predict_ds >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
observed_cats = as.factor(ema_val$pollen_cat) %>% ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
confusionMatrix(observed_cats, ema_cat)
val = filter(total, fyear == 2018, season == 'In season') # 2014
# now make predictions
# add EMA to validation set
# exponential moving average variables -------
ema_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(EMA(max_temp, 7), 1),
#rollmean_vegindex = lag(rollmean(veg_index, 16, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(EMA(pollen_count, 7), 1),
rollmean_rain      = lag(EMA(rain, 7), 1),
rollmean_windspeed = lag(EMA(wind_speed, 7), 1),
rollmean_humid = lag(EMA(humid, 7), 1)) %>%
na.omit()
# moving average variables --------------
ma_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(rollmean(max_temp, 7, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(rollmean(pollen_count, 7, na.pad = T, align = 'right'), 1),
rollmean_rain      = lag(rollmean(rain, 7, na.pad = T, align = 'right'), 1),
rollmean_windspeed = lag(rollmean(wind_speed, 7, na.pad = T, align = 'right'), 1),
rollmean_humid = lag(rollmean(humid, 7, na.pad = T, align = 'right'), 1)) %>%
na.omit()
# make predictions
oneday_predict_ema = exp(predict(ema_2, newdata = ema_val)) # ema model
oneday_predict_ma  = exp(predict(ma_2, newdata = ma_val)) # ma model
oneday_predict_ds  = exp(predict(ds_only, newdata = ma_val)) # ma model
# R-squareds
cor(as.numeric(oneday_predict_ema), ema_val$pollen_count)^2
cor(as.numeric(oneday_predict_ma), ma_val$pollen_count)^2
cor(as.numeric(oneday_predict_ds), ma_val$pollen_count)^2
# assess performance
plot(ema_val$pollen_count, type = 'l')
lines(oneday_predict_ema, col = 'red')
lines(oneday_predict_ma, col = 'blue')
lines(oneday_predict_ds, col = 'orange')
# assess category performance
# get EMA categories
ema_cat = case_when(
oneday_predict_ema < 1 ~ "Very low",
oneday_predict_ema >= 1 & oneday_predict_ema < 3 ~ "Low",
oneday_predict_ema >= 3 & oneday_predict_ema < 8 ~ "Moderate",
oneday_predict_ema >= 8 & oneday_predict_ema < 14.8 ~ "High",
oneday_predict_ema >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# get MA categories
ma_cat = case_when(
oneday_predict_ma < 1 ~ "Very low",
oneday_predict_ma >= 1 & oneday_predict_ma < 3 ~ "Low",
oneday_predict_ma >= 3 & oneday_predict_ma < 8 ~ "Moderate",
oneday_predict_ma >= 8 & oneday_predict_ma < 14.8 ~ "High",
oneday_predict_ma >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# DS model categories
ds_cat = case_when(
oneday_predict_ds < 1 ~ "Very low",
oneday_predict_ds >= 1 & oneday_predict_ds < 3 ~ "Low",
oneday_predict_ds >= 3 & oneday_predict_ds < 8 ~ "Moderate",
oneday_predict_ds >= 8 & oneday_predict_ds < 14.8 ~ "High",
oneday_predict_ds >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
observed_cats = as.factor(ema_val$pollen_cat) %>% ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
confusionMatrix(observed_cats, ema_cat)
confusionMatrix(observed_cats, ma_cat)
confusionMatrix(observed_cats, ds_cat)
confusionMatrix(observed_cats, ema_cat)
val = filter(total, fyear == 2018, season == 'Not in season') # 2014
# now make predictions
# add EMA to validation set
# exponential moving average variables -------
ema_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(EMA(max_temp, 7), 1),
#rollmean_vegindex = lag(rollmean(veg_index, 16, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(EMA(pollen_count, 7), 1),
rollmean_rain      = lag(EMA(rain, 7), 1),
rollmean_windspeed = lag(EMA(wind_speed, 7), 1),
rollmean_humid = lag(EMA(humid, 7), 1)) %>%
na.omit()
# moving average variables --------------
ma_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(rollmean(max_temp, 7, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(rollmean(pollen_count, 7, na.pad = T, align = 'right'), 1),
rollmean_rain      = lag(rollmean(rain, 7, na.pad = T, align = 'right'), 1),
rollmean_windspeed = lag(rollmean(wind_speed, 7, na.pad = T, align = 'right'), 1),
rollmean_humid = lag(rollmean(humid, 7, na.pad = T, align = 'right'), 1)) %>%
na.omit()
# make predictions
oneday_predict_ema = exp(predict(ema_2, newdata = ema_val)) # ema model
oneday_predict_ma  = exp(predict(ma_2, newdata = ma_val)) # ma model
oneday_predict_ds  = exp(predict(ds_only, newdata = ma_val)) # ma model
# R-squareds
cor(as.numeric(oneday_predict_ema), ema_val$pollen_count)^2
# assess performance
plot(ema_val$pollen_count, type = 'l')
lines(oneday_predict_ema, col = 'red')
lines(oneday_predict_ma, col = 'blue')
lines(oneday_predict_ds, col = 'orange')
# assess category performance
# get EMA categories
ema_cat = case_when(
oneday_predict_ema < 1 ~ "Very low",
oneday_predict_ema >= 1 & oneday_predict_ema < 3 ~ "Low",
oneday_predict_ema >= 3 & oneday_predict_ema < 8 ~ "Moderate",
oneday_predict_ema >= 8 & oneday_predict_ema < 14.8 ~ "High",
oneday_predict_ema >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# get MA categories
ma_cat = case_when(
oneday_predict_ma < 1 ~ "Very low",
oneday_predict_ma >= 1 & oneday_predict_ma < 3 ~ "Low",
oneday_predict_ma >= 3 & oneday_predict_ma < 8 ~ "Moderate",
oneday_predict_ma >= 8 & oneday_predict_ma < 14.8 ~ "High",
oneday_predict_ma >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# DS model categories
ds_cat = case_when(
oneday_predict_ds < 1 ~ "Very low",
oneday_predict_ds >= 1 & oneday_predict_ds < 3 ~ "Low",
oneday_predict_ds >= 3 & oneday_predict_ds < 8 ~ "Moderate",
oneday_predict_ds >= 8 & oneday_predict_ds < 14.8 ~ "High",
oneday_predict_ds >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
observed_cats = as.factor(ema_val$pollen_cat) %>% ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
confusionMatrix(observed_cats, ema_cat)
filter(total, fyear == 2018,
filter(total, fyear == 2018)
filter(total, fyear == 2018)
filter(total, fyear == 2018)
val = filter(total, fyear == 2018, season == 'Not in season') # 2014
table(val$season)
summary(val$season)
val$season
val$season
val$season
val$season
val$season
val = filter(total, fyear == 2018, season == 'Not in season') # 2014
summary(val$season)
summary(val)
val = filter(total, fyear == 2018, season == 'Not in season') # 2014
summary(val)
# now make predictions
# add EMA to validation set
# exponential moving average variables -------
ema_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(EMA(max_temp, 7), 1),
#rollmean_vegindex = lag(rollmean(veg_index, 16, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(EMA(pollen_count, 7), 1),
rollmean_rain      = lag(EMA(rain, 7), 1),
rollmean_windspeed = lag(EMA(wind_speed, 7), 1),
rollmean_humid = lag(EMA(humid, 7), 1)) %>%
na.omit()
val = filter(total, fyear == 2019, season == 'In season') # 2014
summary(val)
# now make predictions
# add EMA to validation set
# exponential moving average variables -------
ema_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(EMA(max_temp, 7), 1),
#rollmean_vegindex = lag(rollmean(veg_index, 16, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(EMA(pollen_count, 7), 1),
rollmean_rain      = lag(EMA(rain, 7), 1),
rollmean_windspeed = lag(EMA(wind_speed, 7), 1),
rollmean_humid = lag(EMA(humid, 7), 1)) %>%
na.omit()
# moving average variables --------------
ma_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(rollmean(max_temp, 7, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(rollmean(pollen_count, 7, na.pad = T, align = 'right'), 1),
rollmean_rain      = lag(rollmean(rain, 7, na.pad = T, align = 'right'), 1),
rollmean_windspeed = lag(rollmean(wind_speed, 7, na.pad = T, align = 'right'), 1),
rollmean_humid = lag(rollmean(humid, 7, na.pad = T, align = 'right'), 1)) %>%
na.omit()
# make predictions
oneday_predict_ema = exp(predict(ema_2, newdata = ema_val)) # ema model
oneday_predict_ma  = exp(predict(ma_2, newdata = ma_val)) # ma model
oneday_predict_ds  = exp(predict(ds_only, newdata = ma_val)) # ma model
# R-squareds
cor(as.numeric(oneday_predict_ema), ema_val$pollen_count)^2
# make predictions
oneday_predict_ema = exp(predict(ema_2, newdata = ema_val)) # ema model
oneday_predict_ma  = exp(predict(ma_2, newdata = ma_val)) # ma model
oneday_predict_ds  = exp(predict(ds_only, newdata = ma_val)) # ma model
# R-squareds
cor(as.numeric(oneday_predict_ema), ema_val$pollen_count)^2
# assess category performance
# get EMA categories
ema_cat = case_when(
oneday_predict_ema < 1 ~ "Very low",
oneday_predict_ema >= 1 & oneday_predict_ema < 3 ~ "Low",
oneday_predict_ema >= 3 & oneday_predict_ema < 8 ~ "Moderate",
oneday_predict_ema >= 8 & oneday_predict_ema < 14.8 ~ "High",
oneday_predict_ema >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# get MA categories
ma_cat = case_when(
oneday_predict_ma < 1 ~ "Very low",
oneday_predict_ma >= 1 & oneday_predict_ma < 3 ~ "Low",
oneday_predict_ma >= 3 & oneday_predict_ma < 8 ~ "Moderate",
oneday_predict_ma >= 8 & oneday_predict_ma < 14.8 ~ "High",
oneday_predict_ma >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# DS model categories
ds_cat = case_when(
oneday_predict_ds < 1 ~ "Very low",
oneday_predict_ds >= 1 & oneday_predict_ds < 3 ~ "Low",
oneday_predict_ds >= 3 & oneday_predict_ds < 8 ~ "Moderate",
oneday_predict_ds >= 8 & oneday_predict_ds < 14.8 ~ "High",
oneday_predict_ds >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
observed_cats = as.factor(ema_val$pollen_cat) %>% ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
confusionMatrix(observed_cats, ema_cat)
val = filter(total, fyear == 2019, season == 'Not in season') # 2014
summary(val)
# now make predictions
# add EMA to validation set
# exponential moving average variables -------
ema_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(EMA(max_temp, 7), 1),
#rollmean_vegindex = lag(rollmean(veg_index, 16, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(EMA(pollen_count, 7), 1),
rollmean_rain      = lag(EMA(rain, 7), 1),
rollmean_windspeed = lag(EMA(wind_speed, 7), 1),
rollmean_humid = lag(EMA(humid, 7), 1)) %>%
na.omit()
# moving average variables --------------
ma_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(rollmean(max_temp, 7, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(rollmean(pollen_count, 7, na.pad = T, align = 'right'), 1),
rollmean_rain      = lag(rollmean(rain, 7, na.pad = T, align = 'right'), 1),
rollmean_windspeed = lag(rollmean(wind_speed, 7, na.pad = T, align = 'right'), 1),
rollmean_humid = lag(rollmean(humid, 7, na.pad = T, align = 'right'), 1)) %>%
na.omit()
# make predictions
oneday_predict_ema = exp(predict(ema_2, newdata = ema_val)) # ema model
oneday_predict_ma  = exp(predict(ma_2, newdata = ma_val)) # ma model
oneday_predict_ds  = exp(predict(ds_only, newdata = ma_val)) # ma model
# R-squareds
cor(as.numeric(oneday_predict_ema), ema_val$pollen_count)^2
cor(as.numeric(oneday_predict_ma), ma_val$pollen_count)^2
cor(as.numeric(oneday_predict_ds), ma_val$pollen_count)^2
# assess performance
plot(ema_val$pollen_count, type = 'l')
lines(oneday_predict_ema, col = 'red')
lines(oneday_predict_ma, col = 'blue')
lines(oneday_predict_ds, col = 'orange')
# assess category performance
# get EMA categories
ema_cat = case_when(
oneday_predict_ema < 1 ~ "Very low",
oneday_predict_ema >= 1 & oneday_predict_ema < 3 ~ "Low",
oneday_predict_ema >= 3 & oneday_predict_ema < 8 ~ "Moderate",
oneday_predict_ema >= 8 & oneday_predict_ema < 14.8 ~ "High",
oneday_predict_ema >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# get MA categories
ma_cat = case_when(
oneday_predict_ma < 1 ~ "Very low",
oneday_predict_ma >= 1 & oneday_predict_ma < 3 ~ "Low",
oneday_predict_ma >= 3 & oneday_predict_ma < 8 ~ "Moderate",
oneday_predict_ma >= 8 & oneday_predict_ma < 14.8 ~ "High",
oneday_predict_ma >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# DS model categories
ds_cat = case_when(
oneday_predict_ds < 1 ~ "Very low",
oneday_predict_ds >= 1 & oneday_predict_ds < 3 ~ "Low",
oneday_predict_ds >= 3 & oneday_predict_ds < 8 ~ "Moderate",
oneday_predict_ds >= 8 & oneday_predict_ds < 14.8 ~ "High",
oneday_predict_ds >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
observed_cats = as.factor(ema_val$pollen_cat) %>% ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
confusionMatrix(observed_cats, ema_cat)
ggplot(total, aes(x = date, y = pollen_count)) +
geom_line()+
theme_minimal()
ggplot(total, aes(x = date, y = pollen_count)) +
geom_line() +
theme_minimal() +
ylab("Pollen Count")
ggplot(total, aes(x = date, y = pollen_count)) +
geom_line() +
theme_minimal() +
ylab("Pollen count")
train = filter(total, fyear <= 2013) # for 2012 and before
# moving average variables --------------
ma = train %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir,
fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(rollmean(max_temp, 7, na.pad = T, align = 'right'), 1),
#rollmean_vegindex = lag(rollmean(veg_index, 16, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(rollmean(pollen_count, 7, na.pad = T, align = 'right'), 1),
rollmean_rain      = lag(rollmean(rain, 7, na.pad = T, align = 'right'), 1),
rollmean_windspeed = lag(rollmean(wind_speed, 7, na.pad = T, align = 'right'), 1),
rollmean_humid = lag(rollmean(humid, 7, na.pad = T, align = 'right'), 1)) %>%
na.omit()
train = filter(total, fyear <= 2013) # for 2012 and before
# moving average variables --------------
ma = train %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir,
fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(rollmean(max_temp, 7, na.pad = T, align = 'right'), 1),
#rollmean_vegindex = lag(rollmean(veg_index, 16, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(rollmean(pollen_count, 7, na.pad = T, align = 'right'), 1),
rollmean_rain      = lag(rollmean(rain, 7, na.pad = T, align = 'right'), 1),
rollmean_windspeed = lag(rollmean(wind_speed, 7, na.pad = T, align = 'right'), 1),
rollmean_humid = lag(rollmean(humid, 7, na.pad = T, align = 'right'), 1)) %>%
na.omit()
# exponential moving average variables
ema = train %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(EMA(max_temp, 7), 1),
#rollmean_vegindex = lag(rollmean(veg_index, 16, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(EMA(pollen_count, 7), 1),
rollmean_rain      = lag(EMA(rain, 7), 1),
rollmean_windspeed = lag(EMA(wind_speed, 7), 1),
rollmean_humid =  lag(EMA(humid, 7), 1)) %>%
na.omit()
# Run GAMs with simple moving averages
ma_1 = gam(pollen_count ~ s(rollmean_pollen, bs = 'cc') + s(rollmean_maxtemp, bs = 'cc')
+ s(max_temp, bs = 'cc') + s(ds, bs = 'cc') +
s(wind_dir) + s(rain) + s(rollmean_rain) + s(humid) + s(wind_speed) +
s(rollmean_windspeed) + s(rollmean_humid) + s(veg_index),
family = nb(), data = ma, scale = -0.1)
(theta_est <- ma_1$family$getTheta(TRUE))
ma_2 = gam(pollen_count ~ s(rollmean_pollen, bs = 'cc') + s(rollmean_maxtemp, bs = 'cc') +
s(max_temp, bs = 'cc') + s(ds, bs = 'cc') +
s(wind_dir) + s(rain) + s(rollmean_rain) + s(humid) + s(wind_speed) +
s(rollmean_windspeed) + s(rollmean_humid) + s(veg_index),
family = negbin(theta_est), data = ma)
AIC(ma_1, ma_2) # ma_2 slightly better
# Run GAMs with exponential moving averages
ema_1 = gam(pollen_count ~ s(rollmean_pollen, bs = 'cc') + s(rollmean_maxtemp, bs = 'cc')
+ s(max_temp, bs = 'cc') + s(ds, bs = 'cc') +
s(wind_dir) + s(rain) + s(rollmean_rain) + s(humid) + s(wind_speed) +
s(rollmean_windspeed) + s(rollmean_humid) + s(veg_index),
family = nb(), data = ema, scale = -0.1)
(theta_est <- ema_1$family$getTheta(TRUE))
ema_2 = gam(pollen_count ~ s(rollmean_pollen, bs = 'cc') + s(rollmean_maxtemp, bs = 'cc') +
s(max_temp, bs = 'cc') + s(ds, bs = 'cc') +
s(wind_dir) + s(rain) + s(rollmean_rain) + s(humid) + s(wind_speed) +
s(rollmean_windspeed) + s(rollmean_humid) + s(veg_index),
family = negbin(theta_est), data = ema)
AIC(ma_2, ema_2) # ema_2 slightly better!
# Now consider a model with only days since
ds_only = gam(pollen_count ~ s(ds, bs = 'cc'), data = ema)
val = filter(total, fyear == 2014)
val = filter(total, fyear == 2018)
# now make predictions
# add EMA to validation set
# exponential moving average variables -------
ema_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(EMA(max_temp, 7), 1),
#rollmean_vegindex = lag(rollmean(veg_index, 16, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(EMA(pollen_count, 7), 1),
rollmean_rain      = lag(EMA(rain, 7), 1),
rollmean_windspeed = lag(EMA(wind_speed, 7), 1),
rollmean_humid = lag(EMA(humid, 7), 1)) %>%
na.omit()
# moving average variables --------------
ma_val = val %>%
select(pollen_count, ds, min_temp, max_temp, veg_index, humid, rain, wind_speed, wind_dir, fyear, season, pollen_cat) %>%
mutate(rollmean_maxtemp   = lag(rollmean(max_temp, 7, na.pad = T, align = 'right'), 1),
rollmean_pollen    = lag(rollmean(pollen_count, 7, na.pad = T, align = 'right'), 1),
rollmean_rain      = lag(rollmean(rain, 7, na.pad = T, align = 'right'), 1),
rollmean_windspeed = lag(rollmean(wind_speed, 7, na.pad = T, align = 'right'), 1),
rollmean_humid = lag(rollmean(humid, 7, na.pad = T, align = 'right'), 1)) %>%
na.omit()
# make predictions
oneday_predict_ema = exp(predict(ema_2, newdata = ema_val)) # ema model
oneday_predict_ma  = exp(predict(ma_2, newdata = ma_val)) # ma model
oneday_predict_ds  = exp(predict(ds_only, newdata = ma_val)) # ma model
plot(oneday_predict_ema, type = 'l')
# R-squareds
cor(as.numeric(oneday_predict_ema), ema_val$pollen_count)^2
cor(as.numeric(oneday_predict_ma), ma_val$pollen_count)^2
cor(as.numeric(oneday_predict_ds), ma_val$pollen_count)^2
# assess performance
plot(ema_val$pollen_count, type = 'l')
lines(oneday_predict_ema, col = 'red')
lines(oneday_predict_ma, col = 'blue')
lines(oneday_predict_ds, col = 'orange')
abline(0, 1, col = 'red')
# assess category performance
# get EMA categories
ema_cat = case_when(
oneday_predict_ema < 1 ~ "Very low",
oneday_predict_ema >= 1 & oneday_predict_ema < 3 ~ "Low",
oneday_predict_ema >= 3 & oneday_predict_ema < 8 ~ "Moderate",
oneday_predict_ema >= 8 & oneday_predict_ema < 14.8 ~ "High",
oneday_predict_ema >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# get MA categories
ma_cat = case_when(
oneday_predict_ma < 1 ~ "Very low",
oneday_predict_ma >= 1 & oneday_predict_ma < 3 ~ "Low",
oneday_predict_ma >= 3 & oneday_predict_ma < 8 ~ "Moderate",
oneday_predict_ma >= 8 & oneday_predict_ma < 14.8 ~ "High",
oneday_predict_ma >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
# DS model categories
ds_cat = case_when(
oneday_predict_ds < 1 ~ "Very low",
oneday_predict_ds >= 1 & oneday_predict_ds < 3 ~ "Low",
oneday_predict_ds >= 3 & oneday_predict_ds < 8 ~ "Moderate",
oneday_predict_ds >= 8 & oneday_predict_ds < 14.8 ~ "High",
oneday_predict_ds >= 14.8 ~ "Very high") %>%
ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
observed_cats = as.factor(ema_val$pollen_cat) %>% ordered(., levels = c("Very low", "Low", "Moderate", "High", "Very high"))
confusionMatrix(observed_cats, ema_cat)
plot(ema_2)
Moderate  = c(0.1, 0.1, 0.4, 0.05, 0.05, 0.1, 0.1),
High      = c(0, 0.5, 0.2, 0.05, 0, 0.1, 0.29),
Very_High = c(0, 0.3, 0.1, 0, 0, 0.1, 0.5)) %>%
mutate(day = ordered(day, levels =  c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday") ))
new = predictions %>%  rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>% group_by(day) %>%
mutate(probability = max(value)) %>% mutate(test = ifelse(probability == value, 1, NA)) %>%
na.omit() %>%  mutate(location = "location") %>% select(-value, -test) %>% data.frame()
colours = c('#40b101', '#ffe500', '#ffa800', '#ff5801', '#aa0e00')
predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>% ggplot(aes(x=variable, y=value, fill=variable)) +
geom_bar(stat = 'identity', position = 'dodge', colour = 'black') +
theme_minimal() +
scale_fill_manual(values = colours) +
facet_wrap(.~ day, scales = 'free') + theme(legend.position = 'none')
# Predictions
predictions = data.frame(day = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"),
Very_Low  = c(0.1, 0, 0.1, 0.7, 0.9, 0.4, 0.01),
Low       = c(0.8, 0.1, 0.2, 0.2, 0.05, 0.3, 0.1),
Moderate  = c(0.1, 0.1, 0.4, 0.05, 0.05, 0.1, 0.1),
High      = c(0, 0.5, 0.2, 0.05, 0, 0.1, 0.29),
Very_High = c(0, 0.3, 0.1, 0, 0, 0.1, 0.5)) %>%
mutate(day = ordered(day, levels =  c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday") ))
new = predictions %>%  rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>% group_by(day) %>%
mutate(probability = max(value)) %>% mutate(test = ifelse(probability == value, 1, NA)) %>%
na.omit() %>%  mutate(location = "location") %>% select(-value, -test) %>% data.frame()
colours = c('#40b101', '#ffe500', '#ffa800', '#ff5801', '#aa0e00')
predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>% ggplot(aes(x=variable, y=value, fill=variable)) +
geom_bar(stat = 'identity', position = 'dodge', colour = 'black') +
theme_minimal() +
scale_fill_manual(values = colours) +
facet_wrap(.~ day, scales = 'free') + theme(legend.position = 'none')
predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
filter(day == 'Monday') %>%
melt(id.vars = 'day') %>% ggplot(aes(x=variable, y=value, fill=variable)) +
geom_bar(stat = 'identity', position = 'dodge', colour = 'black') +
theme_minimal() +
scale_fill_manual(values = colours) +
facet_wrap(.~ day, scales = 'free') + theme(legend.position = 'none')
predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
filter(day == 'Monday') %>%
melt(id.vars = 'day') %>% ggplot(aes(x=variable, y=value, fill=variable)) +
geom_bar(stat = 'identity', position = 'dodge', colour = 'black') +
ylab("Probability") +
theme_minimal() +
scale_fill_manual(values = colours) +
facet_wrap(.~ day, scales = 'free') + theme(legend.position = 'none')
predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
filter(day == 'Monday') %>%
melt(id.vars = 'day') %>% ggplot(aes(x=variable, y=value, fill=variable)) +
geom_bar(stat = 'identity', position = 'dodge', colour = 'black') +
ylab("Probability") +
xlab("Category") +
theme_minimal() +
scale_fill_manual(values = colours) +
facet_wrap(.~ day, scales = 'free') + theme(legend.position = 'none')
