rename(Category = variable) %>%
ggplot(aes(x = day, y = value, fill = Category, group = Category)) +
geom_area(position = 'stack', alpha = 0.8) +
scale_fill_manual(values = colours) +
ylab("Probability") +
xlab("Day") +
theme_minimal()
ggplotly(q)
})
}
# Run App ----------
shinyApp(ui, server)
# User Interface -------
ui <- fluidPage(
fluidRow(
column(width = 12,
reactableOutput("table", height = 250)
)
),
fluidRow(
column(width = 12,
plotlyOutput("plot2", height = 400)
)
)
)
server <- function(input, output){
output$table <- renderReactable(reactable(iris, resizable = TRUE, showPageSizeOptions = TRUE,
onClick = "expand", highlight = TRUE, columns = list(Sepal.Length = colDef(name = "Sepal Length",
aggregate = "max", format = colFormat(suffix = " cm",
digits = 1)), Sepal.Width = colDef(name = "Sepal Width",
defaultSortOrder = "desc", aggregate = "mean", format = list(aggregated = colFormat(suffix = " (avg)",
digits = 2)), cell = function(value) {
if (value >= 3.3) {
classes <- "tag num-high"
} else if (value >= 3) {
classes <- "tag num-med"
} else {
classes <- "tag num-low"
}
value <- format(value, nsmall = 1)
span(class = classes, value)
}), Petal.Length = colDef(name = "Petal Length",
aggregate = "sum"), Petal.Width = colDef(name = "Petal Width",
aggregate = "count"), Species = colDef(aggregate = "frequency")),
details = function(index) {
if (index == 3) {
tabsetPanel(
tabPanel("plot", plotOutput("plot")),
tabPanel("subtable", reactable(iris[1:3, 1:2], fullWidth = FALSE))
)
} else if (index == 5) {
paste("Details for row:", index)
}
}))
output$plot2 = renderPlotly({
q  = predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>%
group_by(day, variable) %>%
rename(Category = variable) %>%
ggplot(aes(x = day, y = value, fill = Category, group = Category)) +
geom_area(position = 'stack', alpha = 0.8) +
scale_fill_manual(values = colours) +
ylab("Probability") +
xlab("Day") +
theme_minimal()
ggplotly(q)
})
}
# Run App ----------
shinyApp(ui, server)
server <- function(input, output){
output$table <- renderReactable(reactable(predictions))
output$plot2 = renderPlotly({
q  = predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>%
group_by(day, variable) %>%
rename(Category = variable) %>%
ggplot(aes(x = day, y = value, fill = Category, group = Category)) +
geom_area(position = 'stack', alpha = 0.8) +
scale_fill_manual(values = colours) +
ylab("Probability") +
xlab("Day") +
theme_minimal()
ggplotly(q)
})
}
# Run App ----------
shinyApp(ui, server)
server <- function(input, output){
output$table <- renderReactable(reactable(t(predictions)))
output$plot2 = renderPlotly({
q  = predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>%
group_by(day, variable) %>%
rename(Category = variable) %>%
ggplot(aes(x = day, y = value, fill = Category, group = Category)) +
geom_area(position = 'stack', alpha = 0.8) +
scale_fill_manual(values = colours) +
ylab("Probability") +
xlab("Day") +
theme_minimal()
ggplotly(q)
})
}
# Run App ----------
shinyApp(ui, server)
server <- function(input, output){
output$table <- renderReactable(data <- iris[10:29, ]
orange_pal <- function(x) rgb(colorRamp(c("#ffe4cc", "#ff9500"))(x), maxColorValue = 255)
reactable(data, columns = list(
Petal.Length = colDef(style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- orange_pal(normalized)
list(background = color)
})
)))
output$plot2 = renderPlotly({
q  = predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>%
group_by(day, variable) %>%
rename(Category = variable) %>%
ggplot(aes(x = day, y = value, fill = Category, group = Category)) +
geom_area(position = 'stack', alpha = 0.8) +
scale_fill_manual(values = colours) +
ylab("Probability") +
xlab("Day") +
theme_minimal()
ggplotly(q)
})
}
# Run App ----------
shinyApp(ui, server)
data <- iris[10:29, ]
orange_pal <- function(x) rgb(colorRamp(c("#ffe4cc", "#ff9500"))(x), maxColorValue = 255)
server <- function(input, output){
output$table <- renderReactable(
reactable(data, columns = list(
Petal.Length = colDef(style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- orange_pal(normalized)
list(background = color)
})
)))
output$plot2 = renderPlotly({
q  = predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>%
group_by(day, variable) %>%
rename(Category = variable) %>%
ggplot(aes(x = day, y = value, fill = Category, group = Category)) +
geom_area(position = 'stack', alpha = 0.8) +
scale_fill_manual(values = colours) +
ylab("Probability") +
xlab("Day") +
theme_minimal()
ggplotly(q)
})
}
# Run App ----------
shinyApp(ui, server)
orders <- data.frame(
Order = 2300:2304,
Created = seq(as.Date("2019-04-01"), by = "day", length.out = 5),
Customer = sample(rownames(MASS::painters), 5),
Status = sample(c("Pending", "Paid", "Canceled"), 5, replace = TRUE)
)
reactable(orders, columns = list(
Status = colDef(cell = function(value) {
class <- paste0("tag status-", tolower(value))
htmltools::div(class = class, value)
})
))
server <- function(input, output){
output$table <- renderReactable(
reactable(orders, columns = list(
Status = colDef(cell = function(value) {
class <- paste0("tag status-", tolower(value))
htmltools::div(class = class, value)
})
))
})
install.packages('htmltools')
install.packages('htmltools')
install.packages("htmltools")
library(htmltools)
install.packages('htmltools')
install.packages("htmltools")
library(htmltools)
server <- function(input, output){
output$table <- renderReactable(reactable(orders, columns = list(
Status = colDef(cell = function(value) {
class <- paste0("tag status-", tolower(value))
htmltools::div(class = class, value)
})
)))
output$plot2 = renderPlotly({
q  = predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>%
group_by(day, variable) %>%
rename(Category = variable) %>%
ggplot(aes(x = day, y = value, fill = Category, group = Category)) +
geom_area(position = 'stack', alpha = 0.8) +
scale_fill_manual(values = colours) +
ylab("Probability") +
xlab("Day") +
theme_minimal()
ggplotly(q)
})
}
# Run App ----------
shinyApp(ui, server)
library(plotly)
library(reactable)
library(shiny)
server <- function(input, output){
output$table <- renderReactable(reactable(orders, columns = list(
Status = colDef(cell = function(value) {
class <- paste0("tag status-", tolower(value))
htmltools::div(class = class, value)
})
)))
output$plot2 = renderPlotly({
q  = predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>%
group_by(day, variable) %>%
rename(Category = variable) %>%
ggplot(aes(x = day, y = value, fill = Category, group = Category)) +
geom_area(position = 'stack', alpha = 0.8) +
scale_fill_manual(values = colours) +
ylab("Probability") +
xlab("Day") +
theme_minimal()
ggplotly(q)
})
}
# Run App ----------
shinyApp(ui, server)
# Shiny app without buttons
library(shiny)
library(tidyverse)
library(reshape2)
library(plotly)
library(directlabels)
server <- function(input, output){
output$table <- renderReactable(reactable(orders, columns = list(
Status = colDef(cell = function(value) {
class <- paste0("tag status-", tolower(value))
htmltools::div(class = class, value)
})
)))
output$plot2 = renderPlotly({
q  = predictions %>% rename(`Very Low` = Very_Low, `Very High` = Very_High) %>%
melt(id.vars = 'day') %>%
group_by(day, variable) %>%
rename(Category = variable) %>%
ggplot(aes(x = day, y = value, fill = Category, group = Category)) +
geom_area(position = 'stack', alpha = 0.8) +
scale_fill_manual(values = colours) +
ylab("Probability") +
xlab("Day") +
theme_minimal()
ggplotly(q)
})
}
# Run App ----------
shinyApp(ui, server)
orders <- data.frame(
Order = 2300:2304,
Created = seq(as.Date("2019-04-01"), by = "day", length.out = 5),
Customer = sample(rownames(MASS::painters), 5),
Status = sample(c("Pending", "Paid", "Canceled"), 5, replace = TRUE)
)
reactable(orders, columns = list(
Status = colDef(cell = function(value) {
class <- paste0("tag status-", tolower(value))
htmltools::div(class = class, value)
})
))
.tag {
display: inline-block;
padding: 2px 12px;
border-radius: 15px;
font-weight: 600;
font-size: 12px;
}
.status-paid {
background: hsl(116, 60%, 90%);
color: hsl(116, 30%, 25%);
}
.status-pending {
background: hsl(230, 70%, 90%);
color: hsl(230, 45%, 30%);
}
.status-canceled {
background: hsl(350, 70%, 90%);
color: hsl(350, 45%, 30%);
}
.tag {
display: inline-block;
padding: 2px 12px;
border-radius: 15px;
font-weight: 600;
font-size: 12px;
}
.status-paid {
background: hsl(116, 60%, 90%);
color: hsl(116, 30%, 25%);
}
.status-pending {
background: hsl(230, 70%, 90%);
color: hsl(230, 45%, 30%);
}
.status-canceled {
background: hsl(350, 70%, 90%);
color: hsl(350, 45%, 30%);
}
.tag {
display: inline-block;
padding: 2px 12px;
border-radius: 15px;
font-weight: 600;
font-size: 12px;
}
.status-paid {
background: hsl(116, 60%, 90%);
color: hsl(116, 30%, 25%);
}
.status-pending {
background: hsl(230, 70%, 90%);
color: hsl(230, 45%, 30%);
}
.status-canceled {
background: hsl(350, 70%, 90%);
color: hsl(350, 45%, 30%);
}
div(
.tag {
display: inline-block;
padding: 2px 12px;
border-radius: 15px;
font-weight: 600;
font-size: 12px;
}
.status-paid {
background: hsl(116, 60%, 90%);
color: hsl(116, 30%, 25%);
}
.status-pending {
background: hsl(230, 70%, 90%);
color: hsl(230, 45%, 30%);
}
.status-canceled {
background: hsl(350, 70%, 90%);
color: hsl(350, 45%, 30%);
})
div(
.tag {
display: inline-block;
padding: 2px 12px;
border-radius: 15px;
font-weight: 600;
font-size: 12px;
})
library(htmltools)
.status-canceled {
background: hsl(350, 70%, 90%);
color: hsl(350, 45%, 30%);
}
reactable(
iris,
rowStyle = function(index) {
if (iris[index, "Sepal.Width"] > 3.5) {
list(fontWeight = "bold")
}
}
)
# Server ---------
red_pal <- function(x) rgb(colorRamp(c("#40b101", "#FFDFDB"))(x), maxColorValue = 255)
plot(red_pal, 5)
# Server ---------
red_pal <- function(x) rgb(colorRamp(c("#40b101", "#FFDFDB"))(x))
plot(red_pal(3))
reactable(
data,
columns = list(
Petal.Length = colDef(
style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- orange_pal(normalized)
list(background = color)
}
)
)
)
reactable(
data,
columns = list(
Petal.Length = colDef(
style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- red_pal(normalized)
list(background = color)
}
)
)
)
# Server ---------
red_pal <- function(x) rgb(colorRamp(c("#40b101", "#FFDFDB"))(x), maxColorValue = 150)
plot(red_pal(3))
reactable(
data,
columns = list(
Petal.Length = colDef(
style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- red_pal(normalized)
list(background = color)
}
)
)
)
# Server ---------
red_pal <- c('#DA1600', '#FFDAD5', '#FFDAD5')
plot(red_pal(3))
reactable(
data,
columns = list(
Petal.Length = colDef(
style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- red_pal(normalized)
list(background = color)
}
)
)
)
ifelse(x < 1.2, '#DA1600', ifelse(x < 1, '#FFDAD5', '#FFDAD5'))}
plot(red_pal(3))
# Server ---------
red_pal <- function(x){
ifelse(x < 1.2, '#DA1600', ifelse(x < 1, '#FFDAD5', '#FFDAD5'))}
plot(red_pal(3))
reactable(
data,
columns = list(
Petal.Length = colDef(
style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- red_pal(normalized)
list(background = color)
}
)
)
)
# Server ---------
red_pal <- function(x){
ifelse(x < 0, '#DA1600', ifelse(x < 0.1, '#FFDAD5', '#FFDAD5'))}
plot(red_pal(3))
reactable(
data,
columns = list(
Petal.Length = colDef(
style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- red_pal(normalized)
list(background = color)
}
)
)
)
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
# Server ---------
red_pal <- function(x){
ifelse(x < 0, '#DA1600', ifelse(x > 0.1, '#FFDAD5', '#FFDAD5'))}
plot(red_pal(3))
reactable(
data,
columns = list(
Petal.Length = colDef(
style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- red_pal(normalized)
list(background = color)
}
)
)
)
# Server ---------
red_pal <- function(x){
ifelse(x < 0.4, '#DA1600', ifelse(x > 0.1, '#FFDAD5', '#FFDAD5'))}
red_pal(0)
red_pal(-1)
ifelse(x < 0, '#DA1600', ifelse(x > 0.1, '#FFDAD5', '#FFDAD5'))}
red_pal(-1)
red_pal(0.1)
# Server ---------
red_pal <- function(x){
# Server ---------
red_pal <- function(x){
return(sample(c('#DA1600', '#FFDAD5', '#FFDAD5')))}
reactable(
data,
columns = list(
Petal.Length = colDef(
style = function(value) {
normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))
color <- red_pal(normalized)
list(background = color)
}
)
)
)
plot(red_pal(3))
