guides(shape = guide_legend(override.aes = list(size = 0.5))) +
theme(legend.title = element_text(size = 6),
legend.text = element_text(size = 6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
}
lambda_seq <- exp(seq(1e-8, 1e-2, length = 20))
lambda_seq <- exp(seq(log(1e-8), log(1e-2), length = 20))
for(i in 1:20){
model =  gam(y ~ s(x, k = 160), data = data, sp = lambda_seq[i])
predictions = predict(model, newdata = data)
print(ggplot(data, aes(x, y)) +
geom_point(alpha = 0.1, size = 0.8) +
geom_line(aes(x, y_function, colour = 'True Mean'), size = 0.6,
linetype = 'dashed') +
#geom_line(aes(seq(0, 1, length = 1600), pred1, colour = 'Penalised Spline'), size = 0.6) +
#geom_line(aes(seq(0, 1, length = 1600), pred3, colour = 'Penalised Spline'), size = 0.6) +
geom_line(aes(seq(0, 1, length = 160), predictions, colour = 'Penalised Spline'), size = 0.6) +
labs(colour = NULL) +
scale_color_manual(values = colours) +
theme_bw() +
theme(
legend.position = c(.02, 0.99),
legend.justification = c("left", "top"),
legend.box.just = "right",
legend.margin = margin(5, 5, 5, 5)
) +
guides(shape = guide_legend(override.aes = list(size = 0.5))) +
theme(legend.title = element_text(size = 6),
legend.text = element_text(size = 6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
}
lambda_seq <- exp(seq(log(1e-9), log(1e-2), length = 20))
for(i in 1:20){
model =  gam(y ~ s(x, k = 160), data = data, sp = lambda_seq[i])
predictions = predict(model, newdata = data)
print(ggplot(data, aes(x, y)) +
geom_point(alpha = 0.1, size = 0.8) +
geom_line(aes(x, y_function, colour = 'True Mean'), size = 0.6,
linetype = 'dashed') +
#geom_line(aes(seq(0, 1, length = 1600), pred1, colour = 'Penalised Spline'), size = 0.6) +
#geom_line(aes(seq(0, 1, length = 1600), pred3, colour = 'Penalised Spline'), size = 0.6) +
geom_line(aes(seq(0, 1, length = 160), predictions, colour = 'Penalised Spline'), size = 0.6) +
labs(colour = NULL) +
scale_color_manual(values = colours) +
theme_bw() +
theme(
legend.position = c(.02, 0.99),
legend.justification = c("left", "top"),
legend.box.just = "right",
legend.margin = margin(5, 5, 5, 5)
) +
guides(shape = guide_legend(override.aes = list(size = 0.5))) +
theme(legend.title = element_text(size = 6),
legend.text = element_text(size = 6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
}
print(ggplot(data, aes(x, y)) +
geom_point(alpha = 0.1, size = 0.8) +
geom_line(aes(x, y_function, colour = 'True Mean'), size = 0.6,
linetype = 'dashed') +
#geom_line(aes(seq(0, 1, length = 1600), pred1, colour = 'Penalised Spline'), size = 0.6) +
#geom_line(aes(seq(0, 1, length = 1600), pred3, colour = 'Penalised Spline'), size = 0.6) +
geom_line(aes(seq(0, 1, length = 160), predictions, colour = 'Penalised Spline'), size = 0.6) +
labs(colour = NULL) +
scale_color_manual(values = colours) +
theme_bw() +
theme(
legend.position = c(.02, 0.99),
legend.justification = c("left", "top"),
legend.box.just = "right",
legend.margin = margin(5, 5, 5, 5)
) +
guides(shape = guide_legend(override.aes = list(size = 0.5))) +
theme(legend.title = element_text(size = 6),
legend.text = element_text(size = 6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
for(i in 1:20){
model =  gam(y ~ s(x, k = 160), data = data, sp = lambda_seq[i])
predictions = predict(model, newdata = data)
print(ggplot(data, aes(x, y)) +
geom_point(alpha = 0.1, size = 0.8) +
geom_line(aes(x, y_function, colour = 'True Mean'), size = 0.6,
linetype = 'dashed') +
#geom_line(aes(seq(0, 1, length = 1600), pred1, colour = 'Penalised Spline'), size = 0.6) +
#geom_line(aes(seq(0, 1, length = 1600), pred3, colour = 'Penalised Spline'), size = 0.6) +
geom_line(aes(seq(0, 1, length = 160), predictions, colour = 'Penalised Spline'), size = 0.6) +
labs(colour = NULL) +
scale_color_manual(values = colours) +
theme_bw() +
theme(
legend.position = c(.02, 0.99),
legend.justification = c("left", "top"),
legend.box.just = "right",
legend.margin = margin(5, 5, 5, 5)
) +
guides(shape = guide_legend(override.aes = list(size = 0.5))) +
theme(legend.title = element_text(size = 6),
legend.text = element_text(size = 6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
}
lambda_seq <- exp(seq(log(1e-9), log(1e-1), length = 20))
for(i in 1:20){
model =  gam(y ~ s(x, k = 160), data = data, sp = lambda_seq[i])
predictions = predict(model, newdata = data)
print(ggplot(data, aes(x, y)) +
geom_point(alpha = 0.1, size = 0.8) +
geom_line(aes(x, y_function, colour = 'True Mean'), size = 0.6,
linetype = 'dashed') +
#geom_line(aes(seq(0, 1, length = 1600), pred1, colour = 'Penalised Spline'), size = 0.6) +
#geom_line(aes(seq(0, 1, length = 1600), pred3, colour = 'Penalised Spline'), size = 0.6) +
geom_line(aes(seq(0, 1, length = 160), predictions, colour = 'Penalised Spline'), size = 0.6) +
labs(colour = NULL) +
scale_color_manual(values = colours) +
theme_bw() +
theme(
legend.position = c(.02, 0.99),
legend.justification = c("left", "top"),
legend.box.just = "right",
legend.margin = margin(5, 5, 5, 5)
) +
guides(shape = guide_legend(override.aes = list(size = 0.5))) +
theme(legend.title = element_text(size = 6),
legend.text = element_text(size = 6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
}
lambda_seq <- exp(seq(log(1e-9), log(1), length = 20))
for(i in 1:20){
model =  gam(y ~ s(x, k = 160), data = data, sp = lambda_seq[i])
predictions = predict(model, newdata = data)
print(ggplot(data, aes(x, y)) +
geom_point(alpha = 0.1, size = 0.8) +
geom_line(aes(x, y_function, colour = 'True Mean'), size = 0.6,
linetype = 'dashed') +
#geom_line(aes(seq(0, 1, length = 1600), pred1, colour = 'Penalised Spline'), size = 0.6) +
#geom_line(aes(seq(0, 1, length = 1600), pred3, colour = 'Penalised Spline'), size = 0.6) +
geom_line(aes(seq(0, 1, length = 160), predictions, colour = 'Penalised Spline'), size = 0.6) +
labs(colour = NULL) +
scale_color_manual(values = colours) +
theme_bw() +
theme(
legend.position = c(.02, 0.99),
legend.justification = c("left", "top"),
legend.box.just = "right",
legend.margin = margin(5, 5, 5, 5)
) +
guides(shape = guide_legend(override.aes = list(size = 0.5))) +
theme(legend.title = element_text(size = 6),
legend.text = element_text(size = 6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
}
for(i in 1:20){
model =  gam(y ~ s(x, k = 160), data = data, sp = lambda_seq[i])
predictions = predict(model, newdata = data)
print(ggplot(data, aes(x, y)) +
geom_point(alpha = 0.1, size = 0.8) +
geom_line(aes(x, y_function, colour = 'True Mean'), size = 0.6,
linetype = 'dashed') +
#geom_line(aes(seq(0, 1, length = 1600), pred1, colour = 'Penalised Spline'), size = 0.6) +
#geom_line(aes(seq(0, 1, length = 1600), pred3, colour = 'Penalised Spline'), size = 0.6) +
geom_line(aes(seq(0, 1, length = 160), predictions, colour = 'Penalised Spline'), size = 0.6) +
labs(colour = NULL) +
scale_color_manual(values = colours) +
theme_bw() +
theme(
legend.position = c(.02, 0.99),
legend.justification = c("left", "top"),
legend.box.just = "right",
legend.margin = margin(5, 5, 5, 5)
) +
guides(shape = guide_legend(override.aes = list(size = 0.5))) +
theme(legend.title = element_text(size = 6),
legend.text = element_text(size = 6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
}
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, "Trump", "Biden")
ifelse(runif(1) <0.22, 1, 0)
outcomes <- ifelse(runif(10000) <0.22, 1, 0)
hist(outcomes)
n = 1:1000
o = n^2 * log(n)
plot(n, o, type = 'l')
# DP workbook
q()
ifelse(runif(1) <= 0.5, "Trump", "Biden")
ifelse(runif(1) <= 0.5, "Trump", "Biden")
ifelse(runif(1) <= 0.5, "Trump", "Biden")
state_outcome = function(trump_prob){
rand = runif(1)
ifelse(rand <= trump_prob,
winner = 'Trump',
winner = 'Biden')
return(paste(round(rand, 2), winner))
}
state_outcome(0.5)
state_outcome = function(trump_prob){
rand = runif(1)
ifelse(rand <= trump_prob,
winner <- 'Trump',
winner <- 'Biden')
return(paste(round(rand, 2), winner))
}
state_outcome(0.5)
state_outcome = function(trump_prob){
rand = runif(1)
ifelse(rand <= trump_prob,
winner <- 'Trump',
winner <- 'Biden')
return(paste(round(rand, 3), winner))
}
state_outcome(0.5)
state_outcome = function(trump_prob){
rand = runif(1)
ifelse(rand <= trump_prob,
winner <- 'Trump',
winner <- 'Biden')
return(paste(round(rand, 3), winner))
}
state_outcome = function(trump_prob){
rand = runif(1)
ifelse(rand <= trump_prob,
winner <- 'Trump',
winner <- 'Biden')
return(paste(round(rand, 2), winner))
}
state_outcome(0.5)
state_outcome(0.1)
state_outcome(0.02)
state_outcome(0.23)
state_outcome(0.09)
state_outcome(0.04)
state_outcome(0.03)
state_outcome(0.12)
state_outcome(0.39)
state_outcome(0.34)
state_outcome(0.54)
state_outcome(0.65)
state_outcome(0.81)
state_outcome(0.89)
state_outcome(0.81)
state_outcome(0.9)
state_outcome(0.3)
state_outcome(0.1)
state_outcome(0.89)
state_outcome(0.16)
state_outcome(0.93)
state_outcome(0.07)
state_outcome(0.13)
state_outcome(0.17)
state_outcome(0.05)
state_outcome(0.17)
state_outcome(0.16)
state_outcome(0.47)
state_outcome(0.41)
state_outcome(0.29)
state_outcome(0.26)
state_outcome(0.37)
state_outcome(0.4)
state_outcome(0.31)
state_outcome(0.36)
state_outcome(0.24)
state_outcome(0.36)
state_outcome(0.21)
state_outcome(0.17)
state_outcome(0.01)
state_outcome(0.08)
state_outcome(0.05)
state_outcome(0.03)
state_outcome(0.02)
state_outcome(0.26)
state_outcome(0.18)
state_outcome(0.05)
state_outcome(0.3)
state_outcome(0.38)
state_outcome(0.25)
state_outcome(0.1)
state_outcome(0.33)
state_outcome(0.34)
state_outcome(0.03)
state_outcome(0.02)
state_outcome(0.01)
state_outcome(0.06)
state_outcome(0.16)
state_outcome(0.57)
state_outcome(0.31)
state_outcome(0.43)
state_outcome(0.28)
state_outcome(0.23)
state_outcome(0.25)
state_outcome(0.55)
state_outcome(0.62)
i = 1:7
beta = 0.25
weights = c(beta,
beta*(1-beta),
beta*(1-beta)^2,
beta*(1-beta)^3,
beta*(1-beta)^4,
beta*(1-beta)^6,
beta*(1-beta)^7
)
plot(weights)
plot(weights/0.25)
plot(weights/(beta*(1-beta)^7))
beta = 0.5
weights = c(beta,
beta*(1-beta),
beta*(1-beta)^2,
beta*(1-beta)^3,
beta*(1-beta)^4,
beta*(1-beta)^6,
beta*(1-beta)^7
)
plot(weights/(beta*(1-beta)^7))
beta = 0.01
weights = c(beta,
beta*(1-beta),
beta*(1-beta)^2,
beta*(1-beta)^3,
beta*(1-beta)^4,
beta*(1-beta)^6,
beta*(1-beta)^7
)
plot(weights/(beta*(1-beta)^7))
state_outcome(0.31)
state_outcome(0.16)
state_outcome(0.16)
state_outcome(0.13)
state_outcome(0.13)
state_outcome(0.12)
state_outcome(0.12)
state_outcome(0.12)
state_outcome(0.12)
state_outcome(0.06)
state_outcome(0.09)
state_outcome(0.11)
state_outcome(0.14)
state_outcome(0.1)
state_outcome(0.09)
state_outcome(0.02)
state_outcome(0.12)
state_outcome(0.19)
state_outcome(0.16)
state_outcome(0.17)
state_outcome(0.14)
state_outcome(0.26)
state_outcome(0.2)
state_outcome(0.61)
state_outcome(0.46)
state_outcome(0.27)
state_outcome(0.45)
state_outcome(0.05)
state_outcome(0.02)
state_outcome(0.32)
state_outcome(0.39)
state_outcome(0.29)
state_outcome(0.01)
state_outcome(0.77)
state_outcome(0.82)
state_outcome(0.91)
state_outcome(0.96)
state_outcome(0.76)
state_outcome(0.64)
state_outcome(0.9)
state_outcome(0.77)
state_outcome(0.93)
state_outcome(0.75)
state_outcome(0.7)
state_outcome(0.3)
state_outcome(0.3)
state_outcome(0.7)
state_outcome(0.68)
state_outcome(0.28)
state_outcome(0.63)
daily_veg
# Get final data frame
rm(list = ls())
library(tidyverse)
setwd('/Users/skycope/Documents/GitHub/grass-pollen')
# Load Birgit's data
load('newCountAPI_BF.RData')
grassdata = dataTotal
veg_index = read.csv("veg_index_2.csv", h = T, sep = ';') %>% mutate(Date = as.Date(Date)) %>%
filter(Date >= "2011-01-01")
# Load Birgit's data
load('newCountAPI_BF.RData')
grassdata = dataTotal
veg_index = read.csv("veg_index_2.csv", h = T, sep = ';') %>% mutate(Date = as.Date(Date)) %>%
filter(Date >= "2011-01-01")
old_indices = 1:nrow(veg_index)
new_indices = matrix(ncol = 1)
# We want daily veg index
for(i in 1:(nrow(veg_index)-1)){
days_between = veg_index$Date[i+1] - veg_index$Date[i]
new_indices = c(new_indices, rep(old_indices[i], days_between))
}
daily_veg = veg_index[new_indices, ] %>% select(Date, Median)
grassdata = dataTotal
veg_index = read.csv("veg_index_2.csv", h = T, sep = ';') %>% mutate(Date = as.Date(Date)) %>%
filter(Date >= "2011-01-01")
setwd('/Users/skycope/Documents/GitHub/grass-pollen')
# Load Birgit's data
load('newCountAPI_BF.RData')
grassdata = dataTotal
veg_index = read.csv("veg_index_2.csv", h = T, sep = ';') %>% mutate(Date = as.Date(Date)) %>%
filter(Date >= "2011-01-01")
setwd('/Users/skycope/Documents/GitHub/grass-pollen')
# Load Birgit's data
load('newCountAPI_BF.RData')
grassdata = dataTotal
veg_index = read.csv("veg_index_2.csv", h = T, sep = ';') %>% mutate(Date = as.Date(Date)) %>%
filter(Date >= "2011-01-01")
setwd('/Users/skycope/Documents/GitHub/grass-pollen')
# Load Birgit's data
load('newCountAPI_BF.RData')
grassdata = dataTotal
veg_index = read.csv("veg_index_2.csv", h = T, sep = ';') %>% mutate(Date = as.Date(Date)) %>%
filter(Date >= "2011-01-01")
old_indices = 1:nrow(veg_index)
new_indices = matrix(ncol = 1)
# We want daily veg index
for(i in 1:(nrow(veg_index)-1)){
days_between = veg_index$Date[i+1] - veg_index$Date[i]
new_indices = c(new_indices, rep(old_indices[i], days_between))
}
daily_veg = veg_index[new_indices, ] %>% select(Date, Median)
daily_veg = veg_index[new_indices, ]
dates = c()
for(i in 1:(nrow(veg_index)-1)){
dates = c(dates, seq(veg_index$Date[i], veg_index$Date[i+1], "days"))
}
dates = unique(lubridate::as_date(dates, origin = lubridate::origin))
daily_veg$date = dates
merged <- merge(daily_veg, grassdata, by = 'date') %>%
mutate(season = case_when(
ds > 240 | ds < 30 ~ "In season",
ds >= 30 | ds <= 240 ~ "Not in season"
)) %>% rename(veg_index = Median, pollen_count = value,
min_temp = value.temp_min, humid = value.humid,
rain = value.rain, wind_speed = value.wind_speed,
visibility = Visibility, max_temp = value.temp_max,
wind_dir = value.wind_dir) %>%
mutate(pollen_cat = case_when(pollen_count < 1 ~ "Very low",
pollen_count >= 1 & pollen_count < 3 ~ "Low",
pollen_count >= 3 & pollen_count < 8 ~ "Moderate",
pollen_count >= 8 & pollen_count < 14.8 ~ "High",
pollen_count >= 14.8 ~ "Very high")) %>%
select(-Conditions, -Date)
write.csv(merged, "data_complete.csv")
set.seed(1)
total = na.omit(merged)
test  = total[0,]
train = total[0,]
val   = total[0,]
# Test set
for(years in c(2011, 2012, 2013, 2014, 2019)){
for(i in 1:2){
inseason = filter(total, season == "In season", fyear == years)
outseason = filter(total, season == "Not in season", fyear == years)
weeks_inseason = floor(nrow(inseason)/7)
weeks_outseason = floor(nrow(outseason)/7)
inseason_index = sample(1:weeks_inseason, 1)
outseason_index = sample(1:weeks_outseason, 1)
test = rbind(test, inseason[(inseason_index*7 - 6): (inseason_index*7),],
outseason[(outseason_index*7 - 6): (outseason_index*7),])
total = total[-(inseason_index*7 - 6): -(inseason_index*7),] # remove the rows used in test
total = total[-(outseason_index*7 - 6): -(outseason_index*7),] # remove the rows used in test
}
}
for(years in c(2011, 2012, 2013, 2014, 2019)){
for(i in 1:2){
inseason = filter(total, season == "In season", fyear == years)
outseason = filter(total, season == "Not in season", fyear == years)
weeks_inseason = floor(nrow(inseason)/7)
weeks_outseason = floor(nrow(outseason)/7)
inseason_index = sample(1:weeks_inseason, 1)
outseason_index = sample(1:weeks_outseason, 1)
val = rbind(val, inseason[(inseason_index*7 - 6): (inseason_index*7),],
outseason[(outseason_index*7 - 6): (outseason_index*7),])
total = total[-(inseason_index*7 - 6): -(inseason_index*7),] # remove the rows used in test
total = total[-(outseason_index*7 - 6): -(outseason_index*7),] # remove the rows used in test
}
}
arrange(test, date) %>% na.omit() %>% ggplot(aes(x = pollen_count)) +
geom_histogram(aes(fill = season)) +
facet_wrap(~ fyear, ncol = 3) +
ggtitle("test set") +
theme_minimal()
arrange(total, date) %>% na.omit() %>% ggplot(aes(x = pollen_count)) +
geom_histogram(aes(fill = season)) +
facet_wrap(~ fyear, ncol = 3) +
ggtitle("validation set") +
theme_minimal()
na.omit(val) %>% write.csv(., "validation.csv")
na.omit(test) %>% write.csv(., "test.csv")
na.omit(total) %>% write.csv(., "train.csv")
val
