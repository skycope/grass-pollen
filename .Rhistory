i=2
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
day_ahead
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
pred
as.numeric(GAM_predict(ema_2, day_ahead))
GAM_predict(ema_2, day_ahead)
ema_2
day_ahead
pred
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
predictions
plot(as.numeric(predictions[1,]), type = "l")
for(k in 2:7){
lines(as.numeric(predictions[k,]), col = k)
}
# Initiate Storage for Predictions
predictions        = as.data.frame(matrix(NA, nrow = 7, ncol = 5))
names(predictions) = c("Very_Low", "Low", "Moderate", "High", "Very_High")
n_samples          = 100 # Set the number fo sample paths
past_samples       = matrix(NA, ncol = n_samples, nrow = 7) # stores each of the n_sample paths for the 7 days
with_post          = TRUE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
plot(as.numeric(predictions[1,]), type = "l")
for(k in 2:7){
lines(as.numeric(predictions[k,]), col = k)
}
predictions
with_post          = FALSE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
plot(as.numeric(predictions[1,]), type = "l")
for(k in 2:7){
lines(as.numeric(predictions[k,]), col = k)
}
par(mfrow(c(2,1)))
par(mfrow=(c(2,1)))
with_post          = TRUE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
par(mfrow=(c(2,1)))
plot(as.numeric(predictions[1,]), type = "l")
for(k in 2:7){
lines(as.numeric(predictions[k,]), col = k)
}
with_post          = FALSE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
plot(as.numeric(predictions[1,]), type = "l")
for(k in 2:7){
lines(as.numeric(predictions[k,]), col = k)
}
var(predictions[k,])
predictions[k,]
var(as.numeric(predictions[k,]))
var(as.numeric(predictions))
predictions
for(i in 1:7){
var(as.numeric(predictions[i,]))
}
for(i in 1:7){
print(var(as.numeric(predictions[i,])))
}
with_post          = TRUE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
for(i in 1:7){
print(var(as.numeric(predictions[i,])))
}
n_samples          = 200 # Set the number fo sample paths
past_samples       = matrix(NA, ncol = n_samples, nrow = 7) # stores each of the n_sample paths for the 7 days
with_post          = TRUE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
for(i in 1:7){
print(var(as.numeric(predictions[i,])))
}
with_post          = FALSE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
for(i in 1:7){
print(var(as.numeric(predictions[i,])))
}
as.numeric(predictions[i,])
var(as.numeric(predictions[i,]))
var(c(1,0,0,0,0))
var(c(0.9,0.1,0,0,0))
past_samples
var(past_samples[1,])
past_samples[1,]
for(i in 1:7){
print(var(past_samples[1,]))
}
for(i in 1:7){
print(var(past_samples[i,]))
}
np = c()
for(i in 1:7){
np = c(np, print(var(past_samples[i,])))
}
np
with_post          = TRUE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
wp = c()
for(i in 1:7){
wp = c(wp, print(var(past_samples[i,])))
}
np
wp
n_samples          = 1000 # Set the number fo sample paths
past_samples       = matrix(NA, ncol = n_samples, nrow = 7) # stores each of the n_sample paths for the 7 days
with_post          = TRUE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
wp = c()
for(i in 1:7){
wp = c(wp, print(var(past_samples[i,])))
}
with_post          = FALSE
# Make 7-day-ahead predictions
# Update twoWeeks data set as you make a new prediction
for (i in 1:7){
if (with_post==TRUE){
if (i == 1){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
}
else{
for (j in 1:n_samples){
day_ahead          = lags(past(j,i), c(i:(i+7) ) )
pred               = as.numeric(GAM_predict(ema_2, day_ahead))
results            = freq(pred, 1)
past_samples[i,j]  = results$samples
}
predictions[i,]      = freq2(past_samples[i,], n_samples)
}
}
if (with_post==FALSE){
day_ahead       = lags(twoWeeks, c(i:(i+7) ) )
pred            = as.numeric(GAM_predict(ema_2, day_ahead))
results         = freq(pred, n_samples)
predictions[i,] = results$freq_table
past_samples[i,]= results$samples   # Save random samples called posterior samples
twoWeeks$pollen_count[i+7] = pred
}
}
np = c()
for(i in 1:7){
np = c(np, print(var(past_samples[i,])))
}
np
wp
# Load Libraries ---------
{
library(tidyverse)
library(ranger)
library(caret)
library(mgcv)
library(gbm)
library(reshape2)
library(dplyr)
library(tidyverse)
library(randomForest)
library(skimr)
}
rm(list = ls())
setwd("/Users/chloestipinovich/Documents/2020/Thesis Project/grass-pollen")
# Read in data ----------
data      = read.csv("Final_Data/data_complete.csv")
data      = as.data.frame(data)
names(data)
head(data)
data      = dplyr::select(data, -File.Name, -Dataset, -aid, -Variance)
data      = rename(data,  VI_count = Count, VI_minimum = Minimum, VI_maximum = Maximum,
VI_range = Range, VI_mean = Mean, VI_sd = Standard.Deviation,
VI_UQ = Upper.Quartile,VI_U1.5.IQR = Upper.1.5.IQR, VI_L1.5.IQR = Lower.1.5.IQR,
VI_LQ = Lower.Quartile)
names(data)
data %>%
group_by(fyear) %>%
summarise(no_rows = length(fyear))
data$date = as.Date(data$date )
train      = data[which(data$fyear=="2011"|data$fyear=="2012"|data$fyear=="2013"),]
validation = data[which(data$fyear=="2014"),]
nrow(validation)
skim(validation)
test       = data[which(data$fyear=="2018"),]
models_RMSE               = matrix(NA, nrow = 5, ncol = 3)
models_accuracy           = matrix(NA, ncol = 4, nrow = 5)
colnames(models_RMSE)     = c("Total", "In Season", "Out of Season")
colnames(models_accuracy) = c("Accuracy for Reg to cats", "Accuracy straight to cats", "In Season","Out of Season")
# pdf("1 Year Counts.pdf", width=10, height=7)
plot(validation$pollen_count, type = 'l', xlab = "Days Since 1 January",
ylab = "Pollen Count")
M1_Reg_Data = dplyr::select(train, -logvalue, -date, - pollen_cat, -X,
-veg_index, - VI_count, - VI_minimum, - VI_maximum,
- VI_range, -VI_mean, - VI_sd, - VI_UQ,
-VI_U1.5.IQR, -veg_index, -VI_L1.5.IQR, -VI_LQ, -visibility) #%>%
rf_grid    = expand.grid(mtry = 10:15,
splitrule = 'variance',
min.node.size = 5) #Default for regression is 5. Controls tree size.
forest_ts = ranger(pollen_count ∼ ., train, bootstrap.ts = "moving”, block.size = 100)
forest_ts = ranger(pollen_count~., train, bootstrap.ts = "moving”, block.size = 100)
)
ranger(pollen_count~., train, bootstrap.ts = "moving”, block.size = 100)
M1_Reg     = train(pollen_count ~ .,
data = M1_Reg_Data,
method = 'horizon',
num.trees = 2000,
verbose = T,
trainControl(method = "timeSlice"),
importance = 'impurity',
trControl = ctrl,
set.seed(2020),
tuneGrid = rf_grid) #Here is the grid
M1_Reg     = train(pollen_count ~ .,
data = M1_Reg_Data,
method = 'initialWindow',
num.trees = 2000,
verbose = T,
trainControl(method = "timeSlice"),
importance = 'impurity',
trControl = ctrl,
set.seed(2020),
tuneGrid = rf_grid) #Here is the grid
